
GccApplicationProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000098  00800060  00000f28  00000fbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000f8  008000f8  00001054  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001054  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001858  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ac  00000000  00000000  000029d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000065c  00000000  00000000  00002c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d4  00000000  00000000  000032d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000337  00000000  00000000  000034ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000089f  00000000  00000000  000037e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00004082  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e2       	ldi	r30, 0x28	; 40
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3f       	cpi	r26, 0xF8	; 248
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 ef       	ldi	r26, 0xF8	; 248
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3f       	cpi	r26, 0xFA	; 250
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9d 03 	call	0x73a	; 0x73a <main>
  8a:	0c 94 92 07 	jmp	0xf24	; 0xf24 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pinChange>:
	pinChange(D3,0);
	
	if(a & 16)
	pinChange(D4,1);
	else
	pinChange(D4,0);
  92:	67 2b       	or	r22, r23
  94:	09 f0       	breq	.+2      	; 0x98 <pinChange+0x6>
  96:	9f c0       	rjmp	.+318    	; 0x1d6 <pinChange+0x144>
  98:	00 97       	sbiw	r24, 0x00	; 0

	if(a & 32)
  9a:	11 f4       	brne	.+4      	; 0xa0 <pinChange+0xe>
  9c:	d8 98       	cbi	0x1b, 0	; 27
	pinChange(D5,1);
  9e:	08 95       	ret
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	91 05       	cpc	r25, r1
  a4:	11 f4       	brne	.+4      	; 0xaa <pinChange+0x18>
  a6:	d9 98       	cbi	0x1b, 1	; 27
  a8:	08 95       	ret
  aa:	82 30       	cpi	r24, 0x02	; 2
	else
	pinChange(D5,0);
  ac:	91 05       	cpc	r25, r1
  ae:	11 f4       	brne	.+4      	; 0xb4 <pinChange+0x22>
  b0:	da 98       	cbi	0x1b, 2	; 27
  b2:	08 95       	ret
  b4:	83 30       	cpi	r24, 0x03	; 3
  b6:	91 05       	cpc	r25, r1
	
	if(a & 64)
  b8:	11 f4       	brne	.+4      	; 0xbe <pinChange+0x2c>
  ba:	db 98       	cbi	0x1b, 3	; 27
	pinChange(D6,1);
  bc:	08 95       	ret
  be:	84 30       	cpi	r24, 0x04	; 4
  c0:	91 05       	cpc	r25, r1
  c2:	11 f4       	brne	.+4      	; 0xc8 <pinChange+0x36>
  c4:	dc 98       	cbi	0x1b, 4	; 27
  c6:	08 95       	ret
  c8:	85 30       	cpi	r24, 0x05	; 5
	else
	pinChange(D6,0);
  ca:	91 05       	cpc	r25, r1
  cc:	11 f4       	brne	.+4      	; 0xd2 <pinChange+0x40>
  ce:	dd 98       	cbi	0x1b, 5	; 27
  d0:	08 95       	ret
  d2:	86 30       	cpi	r24, 0x06	; 6
  d4:	91 05       	cpc	r25, r1
	
	if(a & 128)
  d6:	11 f4       	brne	.+4      	; 0xdc <pinChange+0x4a>
  d8:	de 98       	cbi	0x1b, 6	; 27
	pinChange(D7,1);
  da:	08 95       	ret
  dc:	87 30       	cpi	r24, 0x07	; 7
  de:	91 05       	cpc	r25, r1
  e0:	11 f4       	brne	.+4      	; 0xe6 <pinChange+0x54>
  e2:	df 98       	cbi	0x1b, 7	; 27
  e4:	08 95       	ret
  e6:	8a 30       	cpi	r24, 0x0A	; 10
	else
	pinChange(D7,0);
  e8:	91 05       	cpc	r25, r1
  ea:	11 f4       	brne	.+4      	; 0xf0 <pinChange+0x5e>
  ec:	c0 98       	cbi	0x18, 0	; 24
  ee:	08 95       	ret
  f0:	8b 30       	cpi	r24, 0x0B	; 11
  f2:	91 05       	cpc	r25, r1
}
  f4:	11 f4       	brne	.+4      	; 0xfa <pinChange+0x68>
  f6:	c1 98       	cbi	0x18, 1	; 24
		else if(a == eS_PORTA7)
		  PORTA &= ~(1<<PA7);
		else if(a == eS_PORTB0)
		  PORTB &= ~(1<<PB0);  
		else if(a == eS_PORTB1)
		  PORTB &= ~(1<<PB1);
  f8:	08 95       	ret
		else if(a == eS_PORTB2)
  fa:	8c 30       	cpi	r24, 0x0C	; 12
  fc:	91 05       	cpc	r25, r1
  fe:	11 f4       	brne	.+4      	; 0x104 <pinChange+0x72>
		  PORTB &= ~(1<<PB2);  
 100:	c2 98       	cbi	0x18, 2	; 24
 102:	08 95       	ret
		else if(a == eS_PORTB3)
 104:	8d 30       	cpi	r24, 0x0D	; 13
 106:	91 05       	cpc	r25, r1
 108:	11 f4       	brne	.+4      	; 0x10e <pinChange+0x7c>
		  PORTB &= ~(1<<PB3);  
 10a:	c3 98       	cbi	0x18, 3	; 24
 10c:	08 95       	ret
		else if(a == eS_PORTB4)
 10e:	8e 30       	cpi	r24, 0x0E	; 14
 110:	91 05       	cpc	r25, r1
 112:	11 f4       	brne	.+4      	; 0x118 <pinChange+0x86>
		  PORTB &= ~(1<<PB4);  
 114:	c4 98       	cbi	0x18, 4	; 24
 116:	08 95       	ret
		else if(a == eS_PORTB5)
 118:	8f 30       	cpi	r24, 0x0F	; 15
 11a:	91 05       	cpc	r25, r1
 11c:	11 f4       	brne	.+4      	; 0x122 <pinChange+0x90>
		  PORTB &= ~(1<<PB5);  
 11e:	c5 98       	cbi	0x18, 5	; 24
 120:	08 95       	ret
		else if(a == eS_PORTB6)
 122:	80 31       	cpi	r24, 0x10	; 16
 124:	91 05       	cpc	r25, r1
 126:	11 f4       	brne	.+4      	; 0x12c <pinChange+0x9a>
		  PORTB &= ~(1<<PB6);  
 128:	c6 98       	cbi	0x18, 6	; 24
 12a:	08 95       	ret
		else if(a == eS_PORTB7)
 12c:	81 31       	cpi	r24, 0x11	; 17
 12e:	91 05       	cpc	r25, r1
 130:	11 f4       	brne	.+4      	; 0x136 <pinChange+0xa4>
		  PORTB &= ~(1<<PB7);
 132:	c7 98       	cbi	0x18, 7	; 24
 134:	08 95       	ret
		else if(a == eS_PORTC0)
 136:	84 31       	cpi	r24, 0x14	; 20
 138:	91 05       	cpc	r25, r1
 13a:	11 f4       	brne	.+4      	; 0x140 <pinChange+0xae>
		  PORTC &= ~(1<<PC0);   
 13c:	a8 98       	cbi	0x15, 0	; 21
 13e:	08 95       	ret
		else if(a == eS_PORTC1)
 140:	85 31       	cpi	r24, 0x15	; 21
 142:	91 05       	cpc	r25, r1
 144:	11 f4       	brne	.+4      	; 0x14a <pinChange+0xb8>
		  PORTC &= ~(1<<PC1); 
 146:	a9 98       	cbi	0x15, 1	; 21
 148:	08 95       	ret
		else if(a == eS_PORTC2)
 14a:	86 31       	cpi	r24, 0x16	; 22
 14c:	91 05       	cpc	r25, r1
 14e:	11 f4       	brne	.+4      	; 0x154 <pinChange+0xc2>
		  PORTC &= ~(1<<PC2);
 150:	aa 98       	cbi	0x15, 2	; 21
 152:	08 95       	ret
		else if(a == eS_PORTC3)
 154:	87 31       	cpi	r24, 0x17	; 23
 156:	91 05       	cpc	r25, r1
 158:	11 f4       	brne	.+4      	; 0x15e <pinChange+0xcc>
		  PORTC &= ~(1<<PC3);   
 15a:	ab 98       	cbi	0x15, 3	; 21
 15c:	08 95       	ret
		else if(a == eS_PORTC4)
 15e:	88 31       	cpi	r24, 0x18	; 24
 160:	91 05       	cpc	r25, r1
 162:	11 f4       	brne	.+4      	; 0x168 <pinChange+0xd6>
		  PORTC &= ~(1<<PC4);  
 164:	ac 98       	cbi	0x15, 4	; 21
 166:	08 95       	ret
		else if(a == eS_PORTC5)
 168:	89 31       	cpi	r24, 0x19	; 25
 16a:	91 05       	cpc	r25, r1
 16c:	11 f4       	brne	.+4      	; 0x172 <pinChange+0xe0>
		  PORTC &= ~(1<<PC5);  
 16e:	ad 98       	cbi	0x15, 5	; 21
 170:	08 95       	ret
        else if(a == eS_PORTC6)
 172:	8a 31       	cpi	r24, 0x1A	; 26
 174:	91 05       	cpc	r25, r1
 176:	11 f4       	brne	.+4      	; 0x17c <pinChange+0xea>
          PORTC &= ~(1<<PC6);		
 178:	ae 98       	cbi	0x15, 6	; 21
 17a:	08 95       	ret
		else if(a == eS_PORTC7)
 17c:	8b 31       	cpi	r24, 0x1B	; 27
 17e:	91 05       	cpc	r25, r1
 180:	11 f4       	brne	.+4      	; 0x186 <pinChange+0xf4>
		  PORTC &= ~(1<<PC7);
 182:	af 98       	cbi	0x15, 7	; 21
 184:	08 95       	ret
		else if(a == eS_PORTD0)
 186:	8e 31       	cpi	r24, 0x1E	; 30
 188:	91 05       	cpc	r25, r1
 18a:	11 f4       	brne	.+4      	; 0x190 <pinChange+0xfe>
		  PORTD &= ~(1<<PD0);
 18c:	90 98       	cbi	0x12, 0	; 18
 18e:	08 95       	ret
		else if(a == eS_PORTD1)
 190:	8f 31       	cpi	r24, 0x1F	; 31
 192:	91 05       	cpc	r25, r1
 194:	11 f4       	brne	.+4      	; 0x19a <pinChange+0x108>
		  PORTD &= ~(1<<PD1);  
 196:	91 98       	cbi	0x12, 1	; 18
 198:	08 95       	ret
		else if(a == eS_PORTD2)
 19a:	80 32       	cpi	r24, 0x20	; 32
 19c:	91 05       	cpc	r25, r1
 19e:	11 f4       	brne	.+4      	; 0x1a4 <pinChange+0x112>
		  PORTD &= ~(1<<PD2);
 1a0:	92 98       	cbi	0x12, 2	; 18
 1a2:	08 95       	ret
		else if(a == eS_PORTD3)
 1a4:	81 32       	cpi	r24, 0x21	; 33
 1a6:	91 05       	cpc	r25, r1
 1a8:	11 f4       	brne	.+4      	; 0x1ae <pinChange+0x11c>
		  PORTD &= ~(1<<PD3);
 1aa:	93 98       	cbi	0x12, 3	; 18
 1ac:	08 95       	ret
		else if(a == eS_PORTD4)
 1ae:	82 32       	cpi	r24, 0x22	; 34
 1b0:	91 05       	cpc	r25, r1
 1b2:	11 f4       	brne	.+4      	; 0x1b8 <pinChange+0x126>
		  PORTD &= ~(1<<PD4);
 1b4:	94 98       	cbi	0x12, 4	; 18
 1b6:	08 95       	ret
		else if(a == eS_PORTD5)
 1b8:	83 32       	cpi	r24, 0x23	; 35
 1ba:	91 05       	cpc	r25, r1
 1bc:	11 f4       	brne	.+4      	; 0x1c2 <pinChange+0x130>
		  PORTD &= ~(1<<PD5);
 1be:	95 98       	cbi	0x12, 5	; 18
 1c0:	08 95       	ret
		else if(a == eS_PORTD6)
 1c2:	84 32       	cpi	r24, 0x24	; 36
 1c4:	91 05       	cpc	r25, r1
 1c6:	11 f4       	brne	.+4      	; 0x1cc <pinChange+0x13a>
		  PORTD &= ~(1<<PD6);   
 1c8:	96 98       	cbi	0x12, 6	; 18
 1ca:	08 95       	ret
		else if(a == eS_PORTD7)
 1cc:	85 97       	sbiw	r24, 0x25	; 37
 1ce:	09 f0       	breq	.+2      	; 0x1d2 <pinChange+0x140>
 1d0:	9f c0       	rjmp	.+318    	; 0x310 <pinChange+0x27e>
		  PORTD &= ~(1<<PD7);           
 1d2:	97 98       	cbi	0x12, 7	; 18
 1d4:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTA0)
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	11 f4       	brne	.+4      	; 0x1de <pinChange+0x14c>
		  PORTA |= (1<<PA0);
 1da:	d8 9a       	sbi	0x1b, 0	; 27
 1dc:	08 95       	ret
		else if(a == eS_PORTA1)
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	91 05       	cpc	r25, r1
 1e2:	11 f4       	brne	.+4      	; 0x1e8 <pinChange+0x156>
		  PORTA |= (1<<PA1);
 1e4:	d9 9a       	sbi	0x1b, 1	; 27
 1e6:	08 95       	ret
		else if(a == eS_PORTA2)
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	91 05       	cpc	r25, r1
 1ec:	11 f4       	brne	.+4      	; 0x1f2 <pinChange+0x160>
		  PORTA |= (1<<PA2);
 1ee:	da 9a       	sbi	0x1b, 2	; 27
 1f0:	08 95       	ret
		else if(a == eS_PORTA3)
 1f2:	83 30       	cpi	r24, 0x03	; 3
 1f4:	91 05       	cpc	r25, r1
 1f6:	11 f4       	brne	.+4      	; 0x1fc <pinChange+0x16a>
		  PORTA |= (1<<PA3);
 1f8:	db 9a       	sbi	0x1b, 3	; 27
 1fa:	08 95       	ret
		else if(a == eS_PORTA4)
 1fc:	84 30       	cpi	r24, 0x04	; 4
 1fe:	91 05       	cpc	r25, r1
 200:	11 f4       	brne	.+4      	; 0x206 <pinChange+0x174>
		  PORTA |= (1<<PA4);
 202:	dc 9a       	sbi	0x1b, 4	; 27
 204:	08 95       	ret
		else if(a == eS_PORTA5)
 206:	85 30       	cpi	r24, 0x05	; 5
 208:	91 05       	cpc	r25, r1
 20a:	11 f4       	brne	.+4      	; 0x210 <pinChange+0x17e>
		  PORTA |= (1<<PA5);
 20c:	dd 9a       	sbi	0x1b, 5	; 27
 20e:	08 95       	ret
		else if(a == eS_PORTA6)
 210:	86 30       	cpi	r24, 0x06	; 6
 212:	91 05       	cpc	r25, r1
 214:	11 f4       	brne	.+4      	; 0x21a <pinChange+0x188>
		  PORTA |= (1<<PA6);
 216:	de 9a       	sbi	0x1b, 6	; 27
 218:	08 95       	ret
		else if(a == eS_PORTA7)
 21a:	87 30       	cpi	r24, 0x07	; 7
 21c:	91 05       	cpc	r25, r1
 21e:	11 f4       	brne	.+4      	; 0x224 <pinChange+0x192>
		  PORTA |= (1<<PA7);
 220:	df 9a       	sbi	0x1b, 7	; 27
 222:	08 95       	ret
		else if(a == eS_PORTB0)
 224:	8a 30       	cpi	r24, 0x0A	; 10
 226:	91 05       	cpc	r25, r1
 228:	11 f4       	brne	.+4      	; 0x22e <pinChange+0x19c>
	  	  PORTB |= (1<<PB0);
 22a:	c0 9a       	sbi	0x18, 0	; 24
 22c:	08 95       	ret
		else if(a == eS_PORTB1)
 22e:	8b 30       	cpi	r24, 0x0B	; 11
 230:	91 05       	cpc	r25, r1
 232:	11 f4       	brne	.+4      	; 0x238 <pinChange+0x1a6>
		  PORTB |= (1<<PB1);
 234:	c1 9a       	sbi	0x18, 1	; 24
 236:	08 95       	ret
		else if(a == eS_PORTB2)
 238:	8c 30       	cpi	r24, 0x0C	; 12
 23a:	91 05       	cpc	r25, r1
 23c:	11 f4       	brne	.+4      	; 0x242 <pinChange+0x1b0>
		  PORTB |= (1<<PB2);
 23e:	c2 9a       	sbi	0x18, 2	; 24
 240:	08 95       	ret
		else if(a == eS_PORTB3)
 242:	8d 30       	cpi	r24, 0x0D	; 13
 244:	91 05       	cpc	r25, r1
 246:	11 f4       	brne	.+4      	; 0x24c <pinChange+0x1ba>
		  PORTB |= (1<<PB3);
 248:	c3 9a       	sbi	0x18, 3	; 24
 24a:	08 95       	ret
		else if(a == eS_PORTB4)
 24c:	8e 30       	cpi	r24, 0x0E	; 14
 24e:	91 05       	cpc	r25, r1
 250:	11 f4       	brne	.+4      	; 0x256 <pinChange+0x1c4>
		  PORTB |= (1<<PB4);
 252:	c4 9a       	sbi	0x18, 4	; 24
 254:	08 95       	ret
		else if(a == eS_PORTB5)
 256:	8f 30       	cpi	r24, 0x0F	; 15
 258:	91 05       	cpc	r25, r1
 25a:	11 f4       	brne	.+4      	; 0x260 <pinChange+0x1ce>
		  PORTB |= (1<<PB5);
 25c:	c5 9a       	sbi	0x18, 5	; 24
 25e:	08 95       	ret
		else if(a == eS_PORTB6)
 260:	80 31       	cpi	r24, 0x10	; 16
 262:	91 05       	cpc	r25, r1
 264:	11 f4       	brne	.+4      	; 0x26a <pinChange+0x1d8>
		  PORTB |= (1<<PB6);
 266:	c6 9a       	sbi	0x18, 6	; 24
 268:	08 95       	ret
		else if(a == eS_PORTB7)
 26a:	81 31       	cpi	r24, 0x11	; 17
 26c:	91 05       	cpc	r25, r1
 26e:	11 f4       	brne	.+4      	; 0x274 <pinChange+0x1e2>
		  PORTB |= (1<<PB7);
 270:	c7 9a       	sbi	0x18, 7	; 24
 272:	08 95       	ret
		else if(a == eS_PORTC0)
 274:	84 31       	cpi	r24, 0x14	; 20
 276:	91 05       	cpc	r25, r1
 278:	11 f4       	brne	.+4      	; 0x27e <pinChange+0x1ec>
		  PORTC |= (1<<PC0);
 27a:	a8 9a       	sbi	0x15, 0	; 21
 27c:	08 95       	ret
		else if(a == eS_PORTC1)
 27e:	85 31       	cpi	r24, 0x15	; 21
 280:	91 05       	cpc	r25, r1
 282:	11 f4       	brne	.+4      	; 0x288 <pinChange+0x1f6>
		  PORTC |= (1<<PC1);
 284:	a9 9a       	sbi	0x15, 1	; 21
 286:	08 95       	ret
		else if(a == eS_PORTC2)
 288:	86 31       	cpi	r24, 0x16	; 22
 28a:	91 05       	cpc	r25, r1
 28c:	11 f4       	brne	.+4      	; 0x292 <pinChange+0x200>
	  	  PORTC |= (1<<PC2);
 28e:	aa 9a       	sbi	0x15, 2	; 21
 290:	08 95       	ret
		else if(a == eS_PORTC3)
 292:	87 31       	cpi	r24, 0x17	; 23
 294:	91 05       	cpc	r25, r1
 296:	11 f4       	brne	.+4      	; 0x29c <pinChange+0x20a>
		  PORTC |= (1<<PC3);
 298:	ab 9a       	sbi	0x15, 3	; 21
 29a:	08 95       	ret
		else if(a == eS_PORTC4)
 29c:	88 31       	cpi	r24, 0x18	; 24
 29e:	91 05       	cpc	r25, r1
 2a0:	11 f4       	brne	.+4      	; 0x2a6 <pinChange+0x214>
		  PORTC |= (1<<PC4);
 2a2:	ac 9a       	sbi	0x15, 4	; 21
 2a4:	08 95       	ret
		else if(a == eS_PORTC5)
 2a6:	89 31       	cpi	r24, 0x19	; 25
 2a8:	91 05       	cpc	r25, r1
 2aa:	11 f4       	brne	.+4      	; 0x2b0 <pinChange+0x21e>
		  PORTC |= (1<<PC5);
 2ac:	ad 9a       	sbi	0x15, 5	; 21
 2ae:	08 95       	ret
		else if(a == eS_PORTC6)
 2b0:	8a 31       	cpi	r24, 0x1A	; 26
 2b2:	91 05       	cpc	r25, r1
 2b4:	11 f4       	brne	.+4      	; 0x2ba <pinChange+0x228>
		  PORTC |= (1<<PC6);  
 2b6:	ae 9a       	sbi	0x15, 6	; 21
 2b8:	08 95       	ret
		else if(a == eS_PORTC7)
 2ba:	8b 31       	cpi	r24, 0x1B	; 27
 2bc:	91 05       	cpc	r25, r1
 2be:	11 f4       	brne	.+4      	; 0x2c4 <pinChange+0x232>
		  PORTC |= (1<<PC7);
 2c0:	af 9a       	sbi	0x15, 7	; 21
 2c2:	08 95       	ret
		else if(a == eS_PORTD0)
 2c4:	8e 31       	cpi	r24, 0x1E	; 30
 2c6:	91 05       	cpc	r25, r1
 2c8:	11 f4       	brne	.+4      	; 0x2ce <pinChange+0x23c>
		  PORTD |= (1<<PD0);
 2ca:	90 9a       	sbi	0x12, 0	; 18
 2cc:	08 95       	ret
		else if(a == eS_PORTD1)
 2ce:	8f 31       	cpi	r24, 0x1F	; 31
 2d0:	91 05       	cpc	r25, r1
 2d2:	11 f4       	brne	.+4      	; 0x2d8 <pinChange+0x246>
		  PORTD |= (1<<PD1);
 2d4:	91 9a       	sbi	0x12, 1	; 18
 2d6:	08 95       	ret
		else if(a == eS_PORTD2)
 2d8:	80 32       	cpi	r24, 0x20	; 32
 2da:	91 05       	cpc	r25, r1
 2dc:	11 f4       	brne	.+4      	; 0x2e2 <pinChange+0x250>
		  PORTD |= (1<<PD2);
 2de:	92 9a       	sbi	0x12, 2	; 18
 2e0:	08 95       	ret
		else if(a == eS_PORTD3)
 2e2:	81 32       	cpi	r24, 0x21	; 33
 2e4:	91 05       	cpc	r25, r1
 2e6:	11 f4       	brne	.+4      	; 0x2ec <pinChange+0x25a>
		  PORTD |= (1<<PD3);
 2e8:	93 9a       	sbi	0x12, 3	; 18
 2ea:	08 95       	ret
		else if(a == eS_PORTD4)
 2ec:	82 32       	cpi	r24, 0x22	; 34
 2ee:	91 05       	cpc	r25, r1
 2f0:	11 f4       	brne	.+4      	; 0x2f6 <pinChange+0x264>
		  PORTD |= (1<<PD4);
 2f2:	94 9a       	sbi	0x12, 4	; 18
 2f4:	08 95       	ret
		else if(a == eS_PORTD5)
 2f6:	83 32       	cpi	r24, 0x23	; 35
 2f8:	91 05       	cpc	r25, r1
 2fa:	11 f4       	brne	.+4      	; 0x300 <pinChange+0x26e>
		  PORTD |= (1<<PD5);
 2fc:	95 9a       	sbi	0x12, 5	; 18
 2fe:	08 95       	ret
		else if(a == eS_PORTD6)
 300:	84 32       	cpi	r24, 0x24	; 36
 302:	91 05       	cpc	r25, r1
 304:	11 f4       	brne	.+4      	; 0x30a <pinChange+0x278>
		  PORTD |= (1<<PD6);
 306:	96 9a       	sbi	0x12, 6	; 18
 308:	08 95       	ret
		else if(a == eS_PORTD7)
 30a:	85 97       	sbiw	r24, 0x25	; 37
 30c:	09 f4       	brne	.+2      	; 0x310 <pinChange+0x27e>
		  PORTD |= (1<<PD7);
 30e:	97 9a       	sbi	0x12, 7	; 18
 310:	08 95       	ret

00000312 <Lcd4_Port>:
//End LCD 8 Bit Interfacing Functions

//LCD 4 Bit Interfacing Functions

void Lcd4_Port(char a)
{
 312:	cf 93       	push	r28
 314:	c8 2f       	mov	r28, r24
	if(a & 1)
 316:	80 ff       	sbrs	r24, 0
 318:	07 c0       	rjmp	.+14     	; 0x328 <Lcd4_Port+0x16>
	pinChange(D4,1);
 31a:	61 e0       	ldi	r22, 0x01	; 1
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	82 e2       	ldi	r24, 0x22	; 34
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 326:	06 c0       	rjmp	.+12     	; 0x334 <Lcd4_Port+0x22>
	else
	pinChange(D4,0);
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	82 e2       	ldi	r24, 0x22	; 34
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 2)
 334:	c1 ff       	sbrs	r28, 1
 336:	07 c0       	rjmp	.+14     	; 0x346 <Lcd4_Port+0x34>
	pinChange(D5,1);
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	83 e2       	ldi	r24, 0x23	; 35
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 344:	06 c0       	rjmp	.+12     	; 0x352 <Lcd4_Port+0x40>
	else
	pinChange(D5,0);
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	83 e2       	ldi	r24, 0x23	; 35
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 4)
 352:	c2 ff       	sbrs	r28, 2
 354:	07 c0       	rjmp	.+14     	; 0x364 <Lcd4_Port+0x52>
	pinChange(D6,1);
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	84 e2       	ldi	r24, 0x24	; 36
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 362:	06 c0       	rjmp	.+12     	; 0x370 <Lcd4_Port+0x5e>
	else
	pinChange(D6,0);
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	84 e2       	ldi	r24, 0x24	; 36
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 8)
 370:	c3 ff       	sbrs	r28, 3
 372:	07 c0       	rjmp	.+14     	; 0x382 <Lcd4_Port+0x70>
	pinChange(D7,1);
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	85 e2       	ldi	r24, 0x25	; 37
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 380:	06 c0       	rjmp	.+12     	; 0x38e <Lcd4_Port+0x7c>
	else
	pinChange(D7,0);
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	85 e2       	ldi	r24, 0x25	; 37
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
}
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
 392:	cf 93       	push	r28
 394:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	8a e1       	ldi	r24, 0x1A	; 26
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	Lcd4_Port(a);
 3a2:	8c 2f       	mov	r24, r28
 3a4:	0e 94 89 01 	call	0x312	; 0x312 <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
 3a8:	61 e0       	ldi	r22, 0x01	; 1
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	8b e1       	ldi	r24, 0x1B	; 27
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b4:	8f ec       	ldi	r24, 0xCF	; 207
 3b6:	97 e0       	ldi	r25, 0x07	; 7
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <Lcd4_Cmd+0x26>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <Lcd4_Cmd+0x2c>
 3be:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	8b e1       	ldi	r24, 0x1B	; 27
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 3cc:	8f ec       	ldi	r24, 0xCF	; 207
 3ce:	97 e0       	ldi	r25, 0x07	; 7
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <Lcd4_Cmd+0x3e>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <Lcd4_Cmd+0x44>
 3d6:	00 00       	nop
	_delay_ms(1);
}
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(1);
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 3e8:	08 95       	ret

000003ea <Lcd4_Set_Cursor>:
}

void Lcd4_Set_Cursor(char a, char b)
{
 3ea:	cf 93       	push	r28
 3ec:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 1)
 3ee:	81 30       	cpi	r24, 0x01	; 1
 3f0:	59 f4       	brne	.+22     	; 0x408 <Lcd4_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
 3f2:	80 e8       	ldi	r24, 0x80	; 128
 3f4:	86 0f       	add	r24, r22
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
 3f6:	82 95       	swap	r24
 3f8:	8f 70       	andi	r24, 0x0F	; 15
 3fa:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
		Lcd4_Cmd(y);
 3fe:	8c 2f       	mov	r24, r28
 400:	8f 70       	andi	r24, 0x0F	; 15
 402:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 406:	0c c0       	rjmp	.+24     	; 0x420 <Lcd4_Set_Cursor+0x36>
	}
	else if(a == 2)
 408:	82 30       	cpi	r24, 0x02	; 2
 40a:	51 f4       	brne	.+20     	; 0x420 <Lcd4_Set_Cursor+0x36>
	{
		temp = 0xC0 + b;
 40c:	80 ec       	ldi	r24, 0xC0	; 192
 40e:	86 0f       	add	r24, r22
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
 410:	82 95       	swap	r24
 412:	8f 70       	andi	r24, 0x0F	; 15
 414:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
		Lcd4_Cmd(y);
 418:	8c 2f       	mov	r24, r28
 41a:	8f 70       	andi	r24, 0x0F	; 15
 41c:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	}
}
 420:	cf 91       	pop	r28
 422:	08 95       	ret

00000424 <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	0e 94 89 01 	call	0x312	; 0x312 <Lcd4_Port>
 42a:	8f e3       	ldi	r24, 0x3F	; 63
 42c:	9c e9       	ldi	r25, 0x9C	; 156
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <Lcd4_Init+0xa>
 432:	00 c0       	rjmp	.+0      	; 0x434 <Lcd4_Init+0x10>
 434:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
 436:	83 e0       	ldi	r24, 0x03	; 3
 438:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 43c:	8f e0       	ldi	r24, 0x0F	; 15
 43e:	97 e2       	ldi	r25, 0x27	; 39
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <Lcd4_Init+0x1c>
 444:	00 c0       	rjmp	.+0      	; 0x446 <Lcd4_Init+0x22>
 446:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
 448:	83 e0       	ldi	r24, 0x03	; 3
 44a:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 44e:	8f ee       	ldi	r24, 0xEF	; 239
 450:	95 e5       	ldi	r25, 0x55	; 85
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <Lcd4_Init+0x2e>
 456:	00 c0       	rjmp	.+0      	; 0x458 <Lcd4_Init+0x34>
 458:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
 45a:	83 e0       	ldi	r24, 0x03	; 3
 45c:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
 460:	82 e0       	ldi	r24, 0x02	; 2
 462:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
 46c:	88 e0       	ldi	r24, 0x08	; 8
 46e:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
 478:	8c e0       	ldi	r24, 0x0C	; 12
 47a:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
 484:	86 e0       	ldi	r24, 0x06	; 6
 486:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 48a:	08 95       	ret

0000048c <Lcd4_Write_Char>:
}

void Lcd4_Write_Char(char a)
{
 48c:	cf 93       	push	r28
 48e:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
 490:	61 e0       	ldi	r22, 0x01	; 1
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	8a e1       	ldi	r24, 0x1A	; 26
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
 49c:	8c 2f       	mov	r24, r28
 49e:	82 95       	swap	r24
 4a0:	8f 70       	andi	r24, 0x0F	; 15
 4a2:	0e 94 89 01 	call	0x312	; 0x312 <Lcd4_Port>
	pinChange(EN,1);
 4a6:	61 e0       	ldi	r22, 0x01	; 1
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	8b e1       	ldi	r24, 0x1B	; 27
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 4b2:	8f ec       	ldi	r24, 0xCF	; 207
 4b4:	97 e0       	ldi	r25, 0x07	; 7
 4b6:	01 97       	sbiw	r24, 0x01	; 1
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <Lcd4_Write_Char+0x2a>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <Lcd4_Write_Char+0x30>
 4bc:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	8b e1       	ldi	r24, 0x1B	; 27
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 4ca:	8f ec       	ldi	r24, 0xCF	; 207
 4cc:	97 e0       	ldi	r25, 0x07	; 7
 4ce:	01 97       	sbiw	r24, 0x01	; 1
 4d0:	f1 f7       	brne	.-4      	; 0x4ce <Lcd4_Write_Char+0x42>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <Lcd4_Write_Char+0x48>
 4d4:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
 4d6:	8c 2f       	mov	r24, r28
 4d8:	8f 70       	andi	r24, 0x0F	; 15
 4da:	0e 94 89 01 	call	0x312	; 0x312 <Lcd4_Port>
	pinChange(EN,1);
 4de:	61 e0       	ldi	r22, 0x01	; 1
 4e0:	70 e0       	ldi	r23, 0x00	; 0
 4e2:	8b e1       	ldi	r24, 0x1B	; 27
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 4ea:	8f ec       	ldi	r24, 0xCF	; 207
 4ec:	97 e0       	ldi	r25, 0x07	; 7
 4ee:	01 97       	sbiw	r24, 0x01	; 1
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <Lcd4_Write_Char+0x62>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <Lcd4_Write_Char+0x68>
 4f4:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
 4f6:	60 e0       	ldi	r22, 0x00	; 0
 4f8:	70 e0       	ldi	r23, 0x00	; 0
 4fa:	8b e1       	ldi	r24, 0x1B	; 27
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 502:	8f ec       	ldi	r24, 0xCF	; 207
 504:	97 e0       	ldi	r25, 0x07	; 7
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	f1 f7       	brne	.-4      	; 0x506 <Lcd4_Write_Char+0x7a>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <Lcd4_Write_Char+0x80>
 50c:	00 00       	nop
	_delay_ms(1);
}
 50e:	cf 91       	pop	r28
 510:	08 95       	ret

00000512 <Lcd4_Write_String>:

void Lcd4_Write_String(char *a)
{
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
 518:	88 81       	ld	r24, Y
 51a:	88 23       	and	r24, r24
 51c:	31 f0       	breq	.+12     	; 0x52a <Lcd4_Write_String+0x18>
 51e:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_Write_Char(a[i]);
 520:	0e 94 46 02 	call	0x48c	; 0x48c <Lcd4_Write_Char>
}

void Lcd4_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
 524:	89 91       	ld	r24, Y+
 526:	81 11       	cpse	r24, r1
 528:	fb cf       	rjmp	.-10     	; 0x520 <Lcd4_Write_String+0xe>
	Lcd4_Write_Char(a[i]);
}
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	08 95       	ret

00000530 <usartinit>:
	}
}

void usartinit()
{
	UBRRH=00;
 530:	10 bc       	out	0x20, r1	; 32
	UBRRL=77;
 532:	8d e4       	ldi	r24, 0x4D	; 77
 534:	89 b9       	out	0x09, r24	; 9
	UCSRB|=(1<<RXEN)|(1<<TXEN);
 536:	8a b1       	in	r24, 0x0a	; 10
 538:	88 61       	ori	r24, 0x18	; 24
 53a:	8a b9       	out	0x0a, r24	; 10
	UCSRC|=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
 53c:	80 b5       	in	r24, 0x20	; 32
 53e:	86 68       	ori	r24, 0x86	; 134
 540:	80 bd       	out	0x20, r24	; 32
 542:	08 95       	ret

00000544 <sendMessage>:
}
void sendMessage()
{
	//Start of message sending code
	for(z=0;cmd1[z]!='\0';z++)
 544:	10 92 f9 00 	sts	0x00F9, r1
 548:	10 92 f8 00 	sts	0x00F8, r1
 54c:	80 91 a3 00 	lds	r24, 0x00A3
 550:	88 23       	and	r24, r24
 552:	c9 f0       	breq	.+50     	; 0x586 <sendMessage+0x42>
	{
		UDR = cmd1[z];
 554:	8c b9       	out	0x0c, r24	; 12
 556:	2f ef       	ldi	r18, 0xFF	; 255
 558:	80 e7       	ldi	r24, 0x70	; 112
 55a:	92 e0       	ldi	r25, 0x02	; 2
 55c:	21 50       	subi	r18, 0x01	; 1
 55e:	80 40       	sbci	r24, 0x00	; 0
 560:	90 40       	sbci	r25, 0x00	; 0
 562:	e1 f7       	brne	.-8      	; 0x55c <sendMessage+0x18>
 564:	00 c0       	rjmp	.+0      	; 0x566 <sendMessage+0x22>
 566:	00 00       	nop
	UCSRC|=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
}
void sendMessage()
{
	//Start of message sending code
	for(z=0;cmd1[z]!='\0';z++)
 568:	80 91 f8 00 	lds	r24, 0x00F8
 56c:	90 91 f9 00 	lds	r25, 0x00F9
 570:	01 96       	adiw	r24, 0x01	; 1
 572:	90 93 f9 00 	sts	0x00F9, r25
 576:	80 93 f8 00 	sts	0x00F8, r24
 57a:	fc 01       	movw	r30, r24
 57c:	ed 55       	subi	r30, 0x5D	; 93
 57e:	ff 4f       	sbci	r31, 0xFF	; 255
 580:	80 81       	ld	r24, Z
 582:	81 11       	cpse	r24, r1
 584:	e7 cf       	rjmp	.-50     	; 0x554 <sendMessage+0x10>
	{
		UDR = cmd1[z];
		_delay_ms(100);
	}
	UDR = ('\r');
 586:	8d e0       	ldi	r24, 0x0D	; 13
 588:	8c b9       	out	0x0c, r24	; 12
 58a:	2f ef       	ldi	r18, 0xFF	; 255
 58c:	84 e3       	ldi	r24, 0x34	; 52
 58e:	9c e0       	ldi	r25, 0x0C	; 12
 590:	21 50       	subi	r18, 0x01	; 1
 592:	80 40       	sbci	r24, 0x00	; 0
 594:	90 40       	sbci	r25, 0x00	; 0
 596:	e1 f7       	brne	.-8      	; 0x590 <sendMessage+0x4c>
 598:	00 c0       	rjmp	.+0      	; 0x59a <sendMessage+0x56>
 59a:	00 00       	nop
	_delay_ms(500);
	for(z=0;cmd2[z]!='\0';z++)
 59c:	10 92 f9 00 	sts	0x00F9, r1
 5a0:	10 92 f8 00 	sts	0x00F8, r1
 5a4:	80 91 99 00 	lds	r24, 0x0099
 5a8:	88 23       	and	r24, r24
 5aa:	c9 f0       	breq	.+50     	; 0x5de <sendMessage+0x9a>
	{
		UDR = cmd2[z];
 5ac:	8c b9       	out	0x0c, r24	; 12
 5ae:	2f ef       	ldi	r18, 0xFF	; 255
 5b0:	80 e7       	ldi	r24, 0x70	; 112
 5b2:	92 e0       	ldi	r25, 0x02	; 2
 5b4:	21 50       	subi	r18, 0x01	; 1
 5b6:	80 40       	sbci	r24, 0x00	; 0
 5b8:	90 40       	sbci	r25, 0x00	; 0
 5ba:	e1 f7       	brne	.-8      	; 0x5b4 <sendMessage+0x70>
 5bc:	00 c0       	rjmp	.+0      	; 0x5be <sendMessage+0x7a>
 5be:	00 00       	nop
		UDR = cmd1[z];
		_delay_ms(100);
	}
	UDR = ('\r');
	_delay_ms(500);
	for(z=0;cmd2[z]!='\0';z++)
 5c0:	80 91 f8 00 	lds	r24, 0x00F8
 5c4:	90 91 f9 00 	lds	r25, 0x00F9
 5c8:	01 96       	adiw	r24, 0x01	; 1
 5ca:	90 93 f9 00 	sts	0x00F9, r25
 5ce:	80 93 f8 00 	sts	0x00F8, r24
 5d2:	fc 01       	movw	r30, r24
 5d4:	e7 56       	subi	r30, 0x67	; 103
 5d6:	ff 4f       	sbci	r31, 0xFF	; 255
 5d8:	80 81       	ld	r24, Z
 5da:	81 11       	cpse	r24, r1
 5dc:	e7 cf       	rjmp	.-50     	; 0x5ac <sendMessage+0x68>
	{
		UDR = cmd2[z];
		_delay_ms(100);
	}
	UDR = ('\r');
 5de:	8d e0       	ldi	r24, 0x0D	; 13
 5e0:	8c b9       	out	0x0c, r24	; 12
 5e2:	2f ef       	ldi	r18, 0xFF	; 255
 5e4:	84 e3       	ldi	r24, 0x34	; 52
 5e6:	9c e0       	ldi	r25, 0x0C	; 12
 5e8:	21 50       	subi	r18, 0x01	; 1
 5ea:	80 40       	sbci	r24, 0x00	; 0
 5ec:	90 40       	sbci	r25, 0x00	; 0
 5ee:	e1 f7       	brne	.-8      	; 0x5e8 <sendMessage+0xa4>
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <sendMessage+0xae>
 5f2:	00 00       	nop
	_delay_ms(500);
	for(z=0;cmd3[z]!='\0';z++)
 5f4:	10 92 f9 00 	sts	0x00F9, r1
 5f8:	10 92 f8 00 	sts	0x00F8, r1
 5fc:	80 91 90 00 	lds	r24, 0x0090
 600:	88 23       	and	r24, r24
 602:	c9 f0       	breq	.+50     	; 0x636 <sendMessage+0xf2>
	{
		UDR = cmd3[z];
 604:	8c b9       	out	0x0c, r24	; 12
 606:	2f ef       	ldi	r18, 0xFF	; 255
 608:	80 e7       	ldi	r24, 0x70	; 112
 60a:	92 e0       	ldi	r25, 0x02	; 2
 60c:	21 50       	subi	r18, 0x01	; 1
 60e:	80 40       	sbci	r24, 0x00	; 0
 610:	90 40       	sbci	r25, 0x00	; 0
 612:	e1 f7       	brne	.-8      	; 0x60c <sendMessage+0xc8>
 614:	00 c0       	rjmp	.+0      	; 0x616 <sendMessage+0xd2>
 616:	00 00       	nop
		UDR = cmd2[z];
		_delay_ms(100);
	}
	UDR = ('\r');
	_delay_ms(500);
	for(z=0;cmd3[z]!='\0';z++)
 618:	80 91 f8 00 	lds	r24, 0x00F8
 61c:	90 91 f9 00 	lds	r25, 0x00F9
 620:	01 96       	adiw	r24, 0x01	; 1
 622:	90 93 f9 00 	sts	0x00F9, r25
 626:	80 93 f8 00 	sts	0x00F8, r24
 62a:	fc 01       	movw	r30, r24
 62c:	e0 57       	subi	r30, 0x70	; 112
 62e:	ff 4f       	sbci	r31, 0xFF	; 255
 630:	80 81       	ld	r24, Z
 632:	81 11       	cpse	r24, r1
 634:	e7 cf       	rjmp	.-50     	; 0x604 <sendMessage+0xc0>
	{
		UDR = cmd3[z];
		_delay_ms(100);
	}
	UDR = ('\"');
 636:	82 e2       	ldi	r24, 0x22	; 34
 638:	8c b9       	out	0x0c, r24	; 12
 63a:	2f ef       	ldi	r18, 0xFF	; 255
 63c:	80 e7       	ldi	r24, 0x70	; 112
 63e:	92 e0       	ldi	r25, 0x02	; 2
 640:	21 50       	subi	r18, 0x01	; 1
 642:	80 40       	sbci	r24, 0x00	; 0
 644:	90 40       	sbci	r25, 0x00	; 0
 646:	e1 f7       	brne	.-8      	; 0x640 <sendMessage+0xfc>
 648:	00 c0       	rjmp	.+0      	; 0x64a <sendMessage+0x106>
 64a:	00 00       	nop
	_delay_ms(100);
	for(z=0;cmd5[z]!='\0';z++)
 64c:	10 92 f9 00 	sts	0x00F9, r1
 650:	10 92 f8 00 	sts	0x00F8, r1
 654:	80 91 60 00 	lds	r24, 0x0060
 658:	88 23       	and	r24, r24
 65a:	c9 f0       	breq	.+50     	; 0x68e <sendMessage+0x14a>
	{
		UDR = cmd5[z];
 65c:	8c b9       	out	0x0c, r24	; 12
 65e:	2f ef       	ldi	r18, 0xFF	; 255
 660:	80 e7       	ldi	r24, 0x70	; 112
 662:	92 e0       	ldi	r25, 0x02	; 2
 664:	21 50       	subi	r18, 0x01	; 1
 666:	80 40       	sbci	r24, 0x00	; 0
 668:	90 40       	sbci	r25, 0x00	; 0
 66a:	e1 f7       	brne	.-8      	; 0x664 <sendMessage+0x120>
 66c:	00 c0       	rjmp	.+0      	; 0x66e <sendMessage+0x12a>
 66e:	00 00       	nop
		UDR = cmd3[z];
		_delay_ms(100);
	}
	UDR = ('\"');
	_delay_ms(100);
	for(z=0;cmd5[z]!='\0';z++)
 670:	80 91 f8 00 	lds	r24, 0x00F8
 674:	90 91 f9 00 	lds	r25, 0x00F9
 678:	01 96       	adiw	r24, 0x01	; 1
 67a:	90 93 f9 00 	sts	0x00F9, r25
 67e:	80 93 f8 00 	sts	0x00F8, r24
 682:	fc 01       	movw	r30, r24
 684:	e0 5a       	subi	r30, 0xA0	; 160
 686:	ff 4f       	sbci	r31, 0xFF	; 255
 688:	80 81       	ld	r24, Z
 68a:	81 11       	cpse	r24, r1
 68c:	e7 cf       	rjmp	.-50     	; 0x65c <sendMessage+0x118>
	{
		UDR = cmd5[z];
		_delay_ms(100);
	}
	UDR = ('\"');
 68e:	82 e2       	ldi	r24, 0x22	; 34
 690:	8c b9       	out	0x0c, r24	; 12
 692:	2f ef       	ldi	r18, 0xFF	; 255
 694:	80 e7       	ldi	r24, 0x70	; 112
 696:	92 e0       	ldi	r25, 0x02	; 2
 698:	21 50       	subi	r18, 0x01	; 1
 69a:	80 40       	sbci	r24, 0x00	; 0
 69c:	90 40       	sbci	r25, 0x00	; 0
 69e:	e1 f7       	brne	.-8      	; 0x698 <sendMessage+0x154>
 6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <sendMessage+0x15e>
 6a2:	00 00       	nop
	_delay_ms(100);
	UDR = ('\r');
 6a4:	8d e0       	ldi	r24, 0x0D	; 13
 6a6:	8c b9       	out	0x0c, r24	; 12
 6a8:	2f ef       	ldi	r18, 0xFF	; 255
 6aa:	84 e3       	ldi	r24, 0x34	; 52
 6ac:	9c e0       	ldi	r25, 0x0C	; 12
 6ae:	21 50       	subi	r18, 0x01	; 1
 6b0:	80 40       	sbci	r24, 0x00	; 0
 6b2:	90 40       	sbci	r25, 0x00	; 0
 6b4:	e1 f7       	brne	.-8      	; 0x6ae <sendMessage+0x16a>
 6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <sendMessage+0x174>
 6b8:	00 00       	nop
	_delay_ms(500);
	for(z=0;cmd4[z]!='\0';z++)
 6ba:	10 92 f9 00 	sts	0x00F9, r1
 6be:	10 92 f8 00 	sts	0x00F8, r1
 6c2:	80 91 6f 00 	lds	r24, 0x006F
 6c6:	88 23       	and	r24, r24
 6c8:	c9 f0       	breq	.+50     	; 0x6fc <sendMessage+0x1b8>
	{
		UDR = cmd4[z];
 6ca:	8c b9       	out	0x0c, r24	; 12
 6cc:	2f ef       	ldi	r18, 0xFF	; 255
 6ce:	80 e7       	ldi	r24, 0x70	; 112
 6d0:	92 e0       	ldi	r25, 0x02	; 2
 6d2:	21 50       	subi	r18, 0x01	; 1
 6d4:	80 40       	sbci	r24, 0x00	; 0
 6d6:	90 40       	sbci	r25, 0x00	; 0
 6d8:	e1 f7       	brne	.-8      	; 0x6d2 <sendMessage+0x18e>
 6da:	00 c0       	rjmp	.+0      	; 0x6dc <sendMessage+0x198>
 6dc:	00 00       	nop
	}
	UDR = ('\"');
	_delay_ms(100);
	UDR = ('\r');
	_delay_ms(500);
	for(z=0;cmd4[z]!='\0';z++)
 6de:	80 91 f8 00 	lds	r24, 0x00F8
 6e2:	90 91 f9 00 	lds	r25, 0x00F9
 6e6:	01 96       	adiw	r24, 0x01	; 1
 6e8:	90 93 f9 00 	sts	0x00F9, r25
 6ec:	80 93 f8 00 	sts	0x00F8, r24
 6f0:	fc 01       	movw	r30, r24
 6f2:	e1 59       	subi	r30, 0x91	; 145
 6f4:	ff 4f       	sbci	r31, 0xFF	; 255
 6f6:	80 81       	ld	r24, Z
 6f8:	81 11       	cpse	r24, r1
 6fa:	e7 cf       	rjmp	.-50     	; 0x6ca <sendMessage+0x186>
	{
		UDR = cmd4[z];
		_delay_ms(100);
	}
	UDR = (26);// ctrlZ-> to send the messge
 6fc:	8a e1       	ldi	r24, 0x1A	; 26
 6fe:	8c b9       	out	0x0c, r24	; 12
 700:	2f ef       	ldi	r18, 0xFF	; 255
 702:	80 e7       	ldi	r24, 0x70	; 112
 704:	92 e0       	ldi	r25, 0x02	; 2
 706:	21 50       	subi	r18, 0x01	; 1
 708:	80 40       	sbci	r24, 0x00	; 0
 70a:	90 40       	sbci	r25, 0x00	; 0
 70c:	e1 f7       	brne	.-8      	; 0x706 <sendMessage+0x1c2>
 70e:	00 c0       	rjmp	.+0      	; 0x710 <sendMessage+0x1cc>
 710:	00 00       	nop
	_delay_ms(100);
	Lcd4_Set_Cursor(2,0);
 712:	60 e0       	ldi	r22, 0x00	; 0
 714:	82 e0       	ldi	r24, 0x02	; 2
 716:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
	Lcd4_Write_String("MSG SENT!");
 71a:	86 ea       	ldi	r24, 0xA6	; 166
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	0e 94 89 02 	call	0x512	; 0x512 <Lcd4_Write_String>
 722:	2f ef       	ldi	r18, 0xFF	; 255
 724:	84 e3       	ldi	r24, 0x34	; 52
 726:	9c e0       	ldi	r25, 0x0C	; 12
 728:	21 50       	subi	r18, 0x01	; 1
 72a:	80 40       	sbci	r24, 0x00	; 0
 72c:	90 40       	sbci	r25, 0x00	; 0
 72e:	e1 f7       	brne	.-8      	; 0x728 <sendMessage+0x1e4>
 730:	00 c0       	rjmp	.+0      	; 0x732 <sendMessage+0x1ee>
 732:	00 00       	nop
	_delay_ms(500);
	Lcd4_Clear();
 734:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
 738:	08 95       	ret

0000073a <main>:
unsigned char cmd3[]={"AT+CMGS="};
unsigned char cmd4[]={"Impurity detected! Change water."};
unsigned char cmd5[]={"+8801842291568"};
void sendMessage();
int main(void)
{
 73a:	cf 93       	push	r28
 73c:	df 93       	push	r29
 73e:	cd b7       	in	r28, 0x3d	; 61
 740:	de b7       	in	r29, 0x3e	; 62
 742:	63 97       	sbiw	r28, 0x13	; 19
 744:	0f b6       	in	r0, 0x3f	; 63
 746:	f8 94       	cli
 748:	de bf       	out	0x3e, r29	; 62
 74a:	0f be       	out	0x3f, r0	; 63
 74c:	cd bf       	out	0x3d, r28	; 61

	DDRD = 0xff;
 74e:	8f ef       	ldi	r24, 0xFF	; 255
 750:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xff;
 752:	84 bb       	out	0x14, r24	; 20
	MCUCSR = (1<<JTD);
 754:	80 e8       	ldi	r24, 0x80	; 128
 756:	84 bf       	out	0x34, r24	; 52
	MCUCSR = (1<<JTD);
 758:	84 bf       	out	0x34, r24	; 52
	unsigned int analog_light_sensor_value;
	Lcd4_Init();
 75a:	0e 94 12 02 	call	0x424	; 0x424 <Lcd4_Init>
	Lcd4_Clear();
 75e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
	Lcd4_Set_Cursor(1,0);
 762:	60 e0       	ldi	r22, 0x00	; 0
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
	Lcd4_Write_String("Micro Controller");
 76a:	80 eb       	ldi	r24, 0xB0	; 176
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	0e 94 89 02 	call	0x512	; 0x512 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,0);
 772:	60 e0       	ldi	r22, 0x00	; 0
 774:	82 e0       	ldi	r24, 0x02	; 2
 776:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
	Lcd4_Write_String("Course No:316");
 77a:	81 ec       	ldi	r24, 0xC1	; 193
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	0e 94 89 02 	call	0x512	; 0x512 <Lcd4_Write_String>
 782:	2f ef       	ldi	r18, 0xFF	; 255
 784:	84 e3       	ldi	r24, 0x34	; 52
 786:	9c e0       	ldi	r25, 0x0C	; 12
 788:	21 50       	subi	r18, 0x01	; 1
 78a:	80 40       	sbci	r24, 0x00	; 0
 78c:	90 40       	sbci	r25, 0x00	; 0
 78e:	e1 f7       	brne	.-8      	; 0x788 <main+0x4e>
 790:	00 c0       	rjmp	.+0      	; 0x792 <main+0x58>
 792:	00 00       	nop
 794:	2f ef       	ldi	r18, 0xFF	; 255
 796:	84 e3       	ldi	r24, 0x34	; 52
 798:	9c e0       	ldi	r25, 0x0C	; 12
 79a:	21 50       	subi	r18, 0x01	; 1
 79c:	80 40       	sbci	r24, 0x00	; 0
 79e:	90 40       	sbci	r25, 0x00	; 0
 7a0:	e1 f7       	brne	.-8      	; 0x79a <main+0x60>
 7a2:	00 c0       	rjmp	.+0      	; 0x7a4 <main+0x6a>
 7a4:	00 00       	nop
	_delay_ms(500);
	_delay_ms(500);
	Lcd4_Clear();
 7a6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
	Lcd4_Set_Cursor(1,0);
 7aa:	60 e0       	ldi	r22, 0x00	; 0
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
	Lcd4_Write_String("Laboni/115");
 7b2:	8f ec       	ldi	r24, 0xCF	; 207
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	0e 94 89 02 	call	0x512	; 0x512 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,0);
 7ba:	60 e0       	ldi	r22, 0x00	; 0
 7bc:	82 e0       	ldi	r24, 0x02	; 2
 7be:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
	Lcd4_Write_String("Farhin/105");
 7c2:	8a ed       	ldi	r24, 0xDA	; 218
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	0e 94 89 02 	call	0x512	; 0x512 <Lcd4_Write_String>
 7ca:	2f ef       	ldi	r18, 0xFF	; 255
 7cc:	84 e3       	ldi	r24, 0x34	; 52
 7ce:	9c e0       	ldi	r25, 0x0C	; 12
 7d0:	21 50       	subi	r18, 0x01	; 1
 7d2:	80 40       	sbci	r24, 0x00	; 0
 7d4:	90 40       	sbci	r25, 0x00	; 0
 7d6:	e1 f7       	brne	.-8      	; 0x7d0 <main+0x96>
 7d8:	00 c0       	rjmp	.+0      	; 0x7da <main+0xa0>
 7da:	00 00       	nop
	_delay_ms(500);
	int min=10,max=1023,flag=0,dirt=0;
	int MAX_LED=0,MIN_ROOM_LIGHT=9999;
	ADMUX = 0b01100000;
 7dc:	80 e6       	ldi	r24, 0x60	; 96
 7de:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000010;
 7e0:	82 e8       	ldi	r24, 0x82	; 130
 7e2:	86 b9       	out	0x06, r24	; 6
	usartinit();
 7e4:	0e 94 98 02 	call	0x530	; 0x530 <usartinit>
	Lcd4_Write_String("Laboni/115");
	Lcd4_Set_Cursor(2,0);
	Lcd4_Write_String("Farhin/105");
	_delay_ms(500);
	int min=10,max=1023,flag=0,dirt=0;
	int MAX_LED=0,MIN_ROOM_LIGHT=9999;
 7e8:	0f 2e       	mov	r0, r31
 7ea:	ff e0       	ldi	r31, 0x0F	; 15
 7ec:	cf 2e       	mov	r12, r31
 7ee:	f7 e2       	ldi	r31, 0x27	; 39
 7f0:	df 2e       	mov	r13, r31
 7f2:	f0 2d       	mov	r31, r0
 7f4:	a1 2c       	mov	r10, r1
 7f6:	b1 2c       	mov	r11, r1
	Lcd4_Set_Cursor(1,0);
	Lcd4_Write_String("Laboni/115");
	Lcd4_Set_Cursor(2,0);
	Lcd4_Write_String("Farhin/105");
	_delay_ms(500);
	int min=10,max=1023,flag=0,dirt=0;
 7f8:	1b 8a       	std	Y+19, r1	; 0x13
 7fa:	1a 8a       	std	Y+18, r1	; 0x12
 7fc:	19 8a       	std	Y+17, r1	; 0x11
 7fe:	18 8a       	std	Y+16, r1	; 0x10
		ADCSRA |= (1<<ADSC);
		while( ADCSRA & (1<<ADSC) )
		;
		analog_light_sensor_value= ADCL;
		analog_light_sensor_value = (analog_light_sensor_value>>6) | (ADCH<<2);
		snprintf(buffer, sizeof buffer, "%d", analog_light_sensor_value);
 800:	0f 2e       	mov	r0, r31
 802:	fc ee       	ldi	r31, 0xEC	; 236
 804:	ef 2e       	mov	r14, r31
 806:	f0 e0       	ldi	r31, 0x00	; 0
 808:	ff 2e       	mov	r15, r31
 80a:	f0 2d       	mov	r31, r0
 80c:	0f 2e       	mov	r0, r31
 80e:	f5 e0       	ldi	r31, 0x05	; 5
 810:	3f 2e       	mov	r3, r31
 812:	f0 2d       	mov	r31, r0
 814:	4e 01       	movw	r8, r28
 816:	2b e0       	ldi	r18, 0x0B	; 11
 818:	82 0e       	add	r8, r18
 81a:	91 1c       	adc	r9, r1
		if(flag==0&&analog_light_sensor_value<=(MAX_LED-20)&&analog_light_sensor_value>(MIN_ROOM_LIGHT+30))
		{
			dirt++;
			if(dirt==5)
			{
				flag=1;
 81c:	21 2c       	mov	r2, r1
			}
		}
		Lcd4_Set_Cursor(2,0);
		Lcd4_Write_String("MX:");
		Lcd4_Set_Cursor(2,3);
		snprintf(max_val, sizeof max_val, "%d", MAX_LED);
 81e:	3e 01       	movw	r6, r28
 820:	86 e0       	ldi	r24, 0x06	; 6
 822:	68 0e       	add	r6, r24
 824:	71 1c       	adc	r7, r1
		Lcd4_Write_String(max_val);
		Lcd4_Set_Cursor(2,8);
		Lcd4_Write_String("Mn:");
		Lcd4_Set_Cursor(2,11);
		snprintf(min_val, sizeof min_val, "%d", MIN_ROOM_LIGHT);
 826:	ce 01       	movw	r24, r28
 828:	01 96       	adiw	r24, 0x01	; 1
 82a:	2c 01       	movw	r4, r24
	while(1)
	{
		char buffer[5];
		char max_val[5];
		char min_val[5];
		Lcd4_Clear();
 82c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
		Lcd4_Set_Cursor(1,0);
 830:	60 e0       	ldi	r22, 0x00	; 0
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
		Lcd4_Write_String("Value:");
 838:	85 ee       	ldi	r24, 0xE5	; 229
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	0e 94 89 02 	call	0x512	; 0x512 <Lcd4_Write_String>
		Lcd4_Set_Cursor(1,7);
 840:	67 e0       	ldi	r22, 0x07	; 7
 842:	81 e0       	ldi	r24, 0x01	; 1
 844:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
		ADCSRA |= (1<<ADSC);
 848:	36 9a       	sbi	0x06, 6	; 6
		while( ADCSRA & (1<<ADSC) )
 84a:	36 99       	sbic	0x06, 6	; 6
 84c:	fe cf       	rjmp	.-4      	; 0x84a <main+0x110>
		;
		analog_light_sensor_value= ADCL;
 84e:	84 b1       	in	r24, 0x04	; 4
 850:	90 e0       	ldi	r25, 0x00	; 0
		analog_light_sensor_value = (analog_light_sensor_value>>6) | (ADCH<<2);
 852:	00 24       	eor	r0, r0
 854:	88 0f       	add	r24, r24
 856:	99 1f       	adc	r25, r25
 858:	00 1c       	adc	r0, r0
 85a:	88 0f       	add	r24, r24
 85c:	99 1f       	adc	r25, r25
 85e:	00 1c       	adc	r0, r0
 860:	89 2f       	mov	r24, r25
 862:	90 2d       	mov	r25, r0
 864:	05 b1       	in	r16, 0x05	; 5
 866:	10 e0       	ldi	r17, 0x00	; 0
 868:	00 0f       	add	r16, r16
 86a:	11 1f       	adc	r17, r17
 86c:	00 0f       	add	r16, r16
 86e:	11 1f       	adc	r17, r17
 870:	08 2b       	or	r16, r24
 872:	19 2b       	or	r17, r25
		snprintf(buffer, sizeof buffer, "%d", analog_light_sensor_value);
 874:	1f 93       	push	r17
 876:	0f 93       	push	r16
 878:	ff 92       	push	r15
 87a:	ef 92       	push	r14
 87c:	1f 92       	push	r1
 87e:	3f 92       	push	r3
 880:	9f 92       	push	r9
 882:	8f 92       	push	r8
 884:	0e 94 b3 04 	call	0x966	; 0x966 <snprintf>
		Lcd4_Write_String(buffer);
 888:	c4 01       	movw	r24, r8
 88a:	0e 94 89 02 	call	0x512	; 0x512 <Lcd4_Write_String>
		if(analog_light_sensor_value>MAX_LED&&MAX_LED<=max)
 88e:	0f b6       	in	r0, 0x3f	; 63
 890:	f8 94       	cli
 892:	de bf       	out	0x3e, r29	; 62
 894:	0f be       	out	0x3f, r0	; 63
 896:	cd bf       	out	0x3d, r28	; 61
 898:	a0 16       	cp	r10, r16
 89a:	b1 06       	cpc	r11, r17
 89c:	08 f4       	brcc	.+2      	; 0x8a0 <__stack+0x41>
			MAX_LED=analog_light_sensor_value;
 89e:	58 01       	movw	r10, r16
		if(analog_light_sensor_value<MIN_ROOM_LIGHT&&MIN_ROOM_LIGHT>min)
 8a0:	0c 15       	cp	r16, r12
 8a2:	1d 05       	cpc	r17, r13
 8a4:	28 f4       	brcc	.+10     	; 0x8b0 <__stack+0x51>
 8a6:	9b e0       	ldi	r25, 0x0B	; 11
 8a8:	c9 16       	cp	r12, r25
 8aa:	d1 04       	cpc	r13, r1
 8ac:	0c f0       	brlt	.+2      	; 0x8b0 <__stack+0x51>
			MIN_ROOM_LIGHT=analog_light_sensor_value;
 8ae:	68 01       	movw	r12, r16
		if(flag==0&&analog_light_sensor_value<=(MAX_LED-20)&&analog_light_sensor_value>(MIN_ROOM_LIGHT+30))
 8b0:	88 89       	ldd	r24, Y+16	; 0x10
 8b2:	99 89       	ldd	r25, Y+17	; 0x11
 8b4:	89 2b       	or	r24, r25
 8b6:	b1 f4       	brne	.+44     	; 0x8e4 <__stack+0x85>
 8b8:	c5 01       	movw	r24, r10
 8ba:	44 97       	sbiw	r24, 0x14	; 20
 8bc:	80 17       	cp	r24, r16
 8be:	91 07       	cpc	r25, r17
 8c0:	88 f0       	brcs	.+34     	; 0x8e4 <__stack+0x85>
 8c2:	c6 01       	movw	r24, r12
 8c4:	4e 96       	adiw	r24, 0x1e	; 30
 8c6:	80 17       	cp	r24, r16
 8c8:	91 07       	cpc	r25, r17
 8ca:	60 f4       	brcc	.+24     	; 0x8e4 <__stack+0x85>
		{
			dirt++;
 8cc:	8a 89       	ldd	r24, Y+18	; 0x12
 8ce:	9b 89       	ldd	r25, Y+19	; 0x13
 8d0:	01 96       	adiw	r24, 0x01	; 1
 8d2:	9b 8b       	std	Y+19, r25	; 0x13
 8d4:	8a 8b       	std	Y+18, r24	; 0x12
			if(dirt==5)
 8d6:	05 97       	sbiw	r24, 0x05	; 5
 8d8:	29 f4       	brne	.+10     	; 0x8e4 <__stack+0x85>
			{
				flag=1;
				sendMessage();	
 8da:	0e 94 a2 02 	call	0x544	; 0x544 <sendMessage>
		if(flag==0&&analog_light_sensor_value<=(MAX_LED-20)&&analog_light_sensor_value>(MIN_ROOM_LIGHT+30))
		{
			dirt++;
			if(dirt==5)
			{
				flag=1;
 8de:	91 e0       	ldi	r25, 0x01	; 1
 8e0:	98 8b       	std	Y+16, r25	; 0x10
 8e2:	29 8a       	std	Y+17, r2	; 0x11
				sendMessage();	
			}
		}
		Lcd4_Set_Cursor(2,0);
 8e4:	60 e0       	ldi	r22, 0x00	; 0
 8e6:	82 e0       	ldi	r24, 0x02	; 2
 8e8:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
		Lcd4_Write_String("MX:");
 8ec:	8f ee       	ldi	r24, 0xEF	; 239
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	0e 94 89 02 	call	0x512	; 0x512 <Lcd4_Write_String>
		Lcd4_Set_Cursor(2,3);
 8f4:	63 e0       	ldi	r22, 0x03	; 3
 8f6:	82 e0       	ldi	r24, 0x02	; 2
 8f8:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
		snprintf(max_val, sizeof max_val, "%d", MAX_LED);
 8fc:	bf 92       	push	r11
 8fe:	af 92       	push	r10
 900:	ff 92       	push	r15
 902:	ef 92       	push	r14
 904:	1f 92       	push	r1
 906:	3f 92       	push	r3
 908:	7f 92       	push	r7
 90a:	6f 92       	push	r6
 90c:	0e 94 b3 04 	call	0x966	; 0x966 <snprintf>
		Lcd4_Write_String(max_val);
 910:	c3 01       	movw	r24, r6
 912:	0e 94 89 02 	call	0x512	; 0x512 <Lcd4_Write_String>
		Lcd4_Set_Cursor(2,8);
 916:	68 e0       	ldi	r22, 0x08	; 8
 918:	82 e0       	ldi	r24, 0x02	; 2
 91a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
		Lcd4_Write_String("Mn:");
 91e:	83 ef       	ldi	r24, 0xF3	; 243
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	0e 94 89 02 	call	0x512	; 0x512 <Lcd4_Write_String>
		Lcd4_Set_Cursor(2,11);
 926:	6b e0       	ldi	r22, 0x0B	; 11
 928:	82 e0       	ldi	r24, 0x02	; 2
 92a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
		snprintf(min_val, sizeof min_val, "%d", MIN_ROOM_LIGHT);
 92e:	df 92       	push	r13
 930:	cf 92       	push	r12
 932:	ff 92       	push	r15
 934:	ef 92       	push	r14
 936:	1f 92       	push	r1
 938:	3f 92       	push	r3
 93a:	5f 92       	push	r5
 93c:	4f 92       	push	r4
 93e:	0e 94 b3 04 	call	0x966	; 0x966 <snprintf>
		Lcd4_Write_String(min_val);
 942:	c2 01       	movw	r24, r4
 944:	0e 94 89 02 	call	0x512	; 0x512 <Lcd4_Write_String>
 948:	2f ef       	ldi	r18, 0xFF	; 255
 94a:	84 e3       	ldi	r24, 0x34	; 52
 94c:	9c e0       	ldi	r25, 0x0C	; 12
 94e:	21 50       	subi	r18, 0x01	; 1
 950:	80 40       	sbci	r24, 0x00	; 0
 952:	90 40       	sbci	r25, 0x00	; 0
 954:	e1 f7       	brne	.-8      	; 0x94e <__stack+0xef>
 956:	00 c0       	rjmp	.+0      	; 0x958 <__stack+0xf9>
 958:	00 00       	nop
		_delay_ms(500);
		
	}
 95a:	0f b6       	in	r0, 0x3f	; 63
 95c:	f8 94       	cli
 95e:	de bf       	out	0x3e, r29	; 62
 960:	0f be       	out	0x3f, r0	; 63
 962:	cd bf       	out	0x3d, r28	; 61
 964:	63 cf       	rjmp	.-314    	; 0x82c <main+0xf2>

00000966 <snprintf>:
 966:	ae e0       	ldi	r26, 0x0E	; 14
 968:	b0 e0       	ldi	r27, 0x00	; 0
 96a:	e9 eb       	ldi	r30, 0xB9	; 185
 96c:	f4 e0       	ldi	r31, 0x04	; 4
 96e:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__prologue_saves__+0x1c>
 972:	0d 89       	ldd	r16, Y+21	; 0x15
 974:	1e 89       	ldd	r17, Y+22	; 0x16
 976:	8f 89       	ldd	r24, Y+23	; 0x17
 978:	98 8d       	ldd	r25, Y+24	; 0x18
 97a:	26 e0       	ldi	r18, 0x06	; 6
 97c:	2c 83       	std	Y+4, r18	; 0x04
 97e:	1a 83       	std	Y+2, r17	; 0x02
 980:	09 83       	std	Y+1, r16	; 0x01
 982:	97 ff       	sbrs	r25, 7
 984:	02 c0       	rjmp	.+4      	; 0x98a <snprintf+0x24>
 986:	80 e0       	ldi	r24, 0x00	; 0
 988:	90 e8       	ldi	r25, 0x80	; 128
 98a:	01 97       	sbiw	r24, 0x01	; 1
 98c:	9e 83       	std	Y+6, r25	; 0x06
 98e:	8d 83       	std	Y+5, r24	; 0x05
 990:	ae 01       	movw	r20, r28
 992:	45 5e       	subi	r20, 0xE5	; 229
 994:	5f 4f       	sbci	r21, 0xFF	; 255
 996:	69 8d       	ldd	r22, Y+25	; 0x19
 998:	7a 8d       	ldd	r23, Y+26	; 0x1a
 99a:	ce 01       	movw	r24, r28
 99c:	01 96       	adiw	r24, 0x01	; 1
 99e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vfprintf>
 9a2:	4d 81       	ldd	r20, Y+5	; 0x05
 9a4:	5e 81       	ldd	r21, Y+6	; 0x06
 9a6:	57 fd       	sbrc	r21, 7
 9a8:	0a c0       	rjmp	.+20     	; 0x9be <snprintf+0x58>
 9aa:	2f 81       	ldd	r18, Y+7	; 0x07
 9ac:	38 85       	ldd	r19, Y+8	; 0x08
 9ae:	42 17       	cp	r20, r18
 9b0:	53 07       	cpc	r21, r19
 9b2:	0c f4       	brge	.+2      	; 0x9b6 <snprintf+0x50>
 9b4:	9a 01       	movw	r18, r20
 9b6:	f8 01       	movw	r30, r16
 9b8:	e2 0f       	add	r30, r18
 9ba:	f3 1f       	adc	r31, r19
 9bc:	10 82       	st	Z, r1
 9be:	2e 96       	adiw	r28, 0x0e	; 14
 9c0:	e4 e0       	ldi	r30, 0x04	; 4
 9c2:	0c 94 85 07 	jmp	0xf0a	; 0xf0a <__epilogue_restores__+0x1c>

000009c6 <vfprintf>:
 9c6:	ac e0       	ldi	r26, 0x0C	; 12
 9c8:	b0 e0       	ldi	r27, 0x00	; 0
 9ca:	e9 ee       	ldi	r30, 0xE9	; 233
 9cc:	f4 e0       	ldi	r31, 0x04	; 4
 9ce:	0c 94 5b 07 	jmp	0xeb6	; 0xeb6 <__prologue_saves__>
 9d2:	7c 01       	movw	r14, r24
 9d4:	6b 01       	movw	r12, r22
 9d6:	8a 01       	movw	r16, r20
 9d8:	fc 01       	movw	r30, r24
 9da:	17 82       	std	Z+7, r1	; 0x07
 9dc:	16 82       	std	Z+6, r1	; 0x06
 9de:	83 81       	ldd	r24, Z+3	; 0x03
 9e0:	81 ff       	sbrs	r24, 1
 9e2:	bd c1       	rjmp	.+890    	; 0xd5e <vfprintf+0x398>
 9e4:	ce 01       	movw	r24, r28
 9e6:	01 96       	adiw	r24, 0x01	; 1
 9e8:	4c 01       	movw	r8, r24
 9ea:	f7 01       	movw	r30, r14
 9ec:	93 81       	ldd	r25, Z+3	; 0x03
 9ee:	f6 01       	movw	r30, r12
 9f0:	93 fd       	sbrc	r25, 3
 9f2:	85 91       	lpm	r24, Z+
 9f4:	93 ff       	sbrs	r25, 3
 9f6:	81 91       	ld	r24, Z+
 9f8:	6f 01       	movw	r12, r30
 9fa:	88 23       	and	r24, r24
 9fc:	09 f4       	brne	.+2      	; 0xa00 <vfprintf+0x3a>
 9fe:	ab c1       	rjmp	.+854    	; 0xd56 <vfprintf+0x390>
 a00:	85 32       	cpi	r24, 0x25	; 37
 a02:	39 f4       	brne	.+14     	; 0xa12 <vfprintf+0x4c>
 a04:	93 fd       	sbrc	r25, 3
 a06:	85 91       	lpm	r24, Z+
 a08:	93 ff       	sbrs	r25, 3
 a0a:	81 91       	ld	r24, Z+
 a0c:	6f 01       	movw	r12, r30
 a0e:	85 32       	cpi	r24, 0x25	; 37
 a10:	29 f4       	brne	.+10     	; 0xa1c <vfprintf+0x56>
 a12:	b7 01       	movw	r22, r14
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	0e 94 cb 06 	call	0xd96	; 0xd96 <fputc>
 a1a:	e7 cf       	rjmp	.-50     	; 0x9ea <vfprintf+0x24>
 a1c:	51 2c       	mov	r5, r1
 a1e:	31 2c       	mov	r3, r1
 a20:	20 e0       	ldi	r18, 0x00	; 0
 a22:	20 32       	cpi	r18, 0x20	; 32
 a24:	a0 f4       	brcc	.+40     	; 0xa4e <vfprintf+0x88>
 a26:	8b 32       	cpi	r24, 0x2B	; 43
 a28:	69 f0       	breq	.+26     	; 0xa44 <vfprintf+0x7e>
 a2a:	30 f4       	brcc	.+12     	; 0xa38 <vfprintf+0x72>
 a2c:	80 32       	cpi	r24, 0x20	; 32
 a2e:	59 f0       	breq	.+22     	; 0xa46 <vfprintf+0x80>
 a30:	83 32       	cpi	r24, 0x23	; 35
 a32:	69 f4       	brne	.+26     	; 0xa4e <vfprintf+0x88>
 a34:	20 61       	ori	r18, 0x10	; 16
 a36:	2c c0       	rjmp	.+88     	; 0xa90 <vfprintf+0xca>
 a38:	8d 32       	cpi	r24, 0x2D	; 45
 a3a:	39 f0       	breq	.+14     	; 0xa4a <vfprintf+0x84>
 a3c:	80 33       	cpi	r24, 0x30	; 48
 a3e:	39 f4       	brne	.+14     	; 0xa4e <vfprintf+0x88>
 a40:	21 60       	ori	r18, 0x01	; 1
 a42:	26 c0       	rjmp	.+76     	; 0xa90 <vfprintf+0xca>
 a44:	22 60       	ori	r18, 0x02	; 2
 a46:	24 60       	ori	r18, 0x04	; 4
 a48:	23 c0       	rjmp	.+70     	; 0xa90 <vfprintf+0xca>
 a4a:	28 60       	ori	r18, 0x08	; 8
 a4c:	21 c0       	rjmp	.+66     	; 0xa90 <vfprintf+0xca>
 a4e:	27 fd       	sbrc	r18, 7
 a50:	27 c0       	rjmp	.+78     	; 0xaa0 <vfprintf+0xda>
 a52:	30 ed       	ldi	r19, 0xD0	; 208
 a54:	38 0f       	add	r19, r24
 a56:	3a 30       	cpi	r19, 0x0A	; 10
 a58:	78 f4       	brcc	.+30     	; 0xa78 <vfprintf+0xb2>
 a5a:	26 ff       	sbrs	r18, 6
 a5c:	06 c0       	rjmp	.+12     	; 0xa6a <vfprintf+0xa4>
 a5e:	fa e0       	ldi	r31, 0x0A	; 10
 a60:	5f 9e       	mul	r5, r31
 a62:	30 0d       	add	r19, r0
 a64:	11 24       	eor	r1, r1
 a66:	53 2e       	mov	r5, r19
 a68:	13 c0       	rjmp	.+38     	; 0xa90 <vfprintf+0xca>
 a6a:	8a e0       	ldi	r24, 0x0A	; 10
 a6c:	38 9e       	mul	r3, r24
 a6e:	30 0d       	add	r19, r0
 a70:	11 24       	eor	r1, r1
 a72:	33 2e       	mov	r3, r19
 a74:	20 62       	ori	r18, 0x20	; 32
 a76:	0c c0       	rjmp	.+24     	; 0xa90 <vfprintf+0xca>
 a78:	8e 32       	cpi	r24, 0x2E	; 46
 a7a:	21 f4       	brne	.+8      	; 0xa84 <vfprintf+0xbe>
 a7c:	26 fd       	sbrc	r18, 6
 a7e:	6b c1       	rjmp	.+726    	; 0xd56 <vfprintf+0x390>
 a80:	20 64       	ori	r18, 0x40	; 64
 a82:	06 c0       	rjmp	.+12     	; 0xa90 <vfprintf+0xca>
 a84:	8c 36       	cpi	r24, 0x6C	; 108
 a86:	11 f4       	brne	.+4      	; 0xa8c <vfprintf+0xc6>
 a88:	20 68       	ori	r18, 0x80	; 128
 a8a:	02 c0       	rjmp	.+4      	; 0xa90 <vfprintf+0xca>
 a8c:	88 36       	cpi	r24, 0x68	; 104
 a8e:	41 f4       	brne	.+16     	; 0xaa0 <vfprintf+0xda>
 a90:	f6 01       	movw	r30, r12
 a92:	93 fd       	sbrc	r25, 3
 a94:	85 91       	lpm	r24, Z+
 a96:	93 ff       	sbrs	r25, 3
 a98:	81 91       	ld	r24, Z+
 a9a:	6f 01       	movw	r12, r30
 a9c:	81 11       	cpse	r24, r1
 a9e:	c1 cf       	rjmp	.-126    	; 0xa22 <vfprintf+0x5c>
 aa0:	98 2f       	mov	r25, r24
 aa2:	9f 7d       	andi	r25, 0xDF	; 223
 aa4:	95 54       	subi	r25, 0x45	; 69
 aa6:	93 30       	cpi	r25, 0x03	; 3
 aa8:	28 f4       	brcc	.+10     	; 0xab4 <vfprintf+0xee>
 aaa:	0c 5f       	subi	r16, 0xFC	; 252
 aac:	1f 4f       	sbci	r17, 0xFF	; 255
 aae:	ff e3       	ldi	r31, 0x3F	; 63
 ab0:	f9 83       	std	Y+1, r31	; 0x01
 ab2:	0d c0       	rjmp	.+26     	; 0xace <vfprintf+0x108>
 ab4:	83 36       	cpi	r24, 0x63	; 99
 ab6:	31 f0       	breq	.+12     	; 0xac4 <vfprintf+0xfe>
 ab8:	83 37       	cpi	r24, 0x73	; 115
 aba:	71 f0       	breq	.+28     	; 0xad8 <vfprintf+0x112>
 abc:	83 35       	cpi	r24, 0x53	; 83
 abe:	09 f0       	breq	.+2      	; 0xac2 <vfprintf+0xfc>
 ac0:	5b c0       	rjmp	.+182    	; 0xb78 <vfprintf+0x1b2>
 ac2:	22 c0       	rjmp	.+68     	; 0xb08 <vfprintf+0x142>
 ac4:	f8 01       	movw	r30, r16
 ac6:	80 81       	ld	r24, Z
 ac8:	89 83       	std	Y+1, r24	; 0x01
 aca:	0e 5f       	subi	r16, 0xFE	; 254
 acc:	1f 4f       	sbci	r17, 0xFF	; 255
 ace:	44 24       	eor	r4, r4
 ad0:	43 94       	inc	r4
 ad2:	51 2c       	mov	r5, r1
 ad4:	54 01       	movw	r10, r8
 ad6:	15 c0       	rjmp	.+42     	; 0xb02 <vfprintf+0x13c>
 ad8:	38 01       	movw	r6, r16
 ada:	f2 e0       	ldi	r31, 0x02	; 2
 adc:	6f 0e       	add	r6, r31
 ade:	71 1c       	adc	r7, r1
 ae0:	f8 01       	movw	r30, r16
 ae2:	a0 80       	ld	r10, Z
 ae4:	b1 80       	ldd	r11, Z+1	; 0x01
 ae6:	26 ff       	sbrs	r18, 6
 ae8:	03 c0       	rjmp	.+6      	; 0xaf0 <vfprintf+0x12a>
 aea:	65 2d       	mov	r22, r5
 aec:	70 e0       	ldi	r23, 0x00	; 0
 aee:	02 c0       	rjmp	.+4      	; 0xaf4 <vfprintf+0x12e>
 af0:	6f ef       	ldi	r22, 0xFF	; 255
 af2:	7f ef       	ldi	r23, 0xFF	; 255
 af4:	c5 01       	movw	r24, r10
 af6:	2c 87       	std	Y+12, r18	; 0x0c
 af8:	0e 94 c0 06 	call	0xd80	; 0xd80 <strnlen>
 afc:	2c 01       	movw	r4, r24
 afe:	83 01       	movw	r16, r6
 b00:	2c 85       	ldd	r18, Y+12	; 0x0c
 b02:	2f 77       	andi	r18, 0x7F	; 127
 b04:	22 2e       	mov	r2, r18
 b06:	17 c0       	rjmp	.+46     	; 0xb36 <vfprintf+0x170>
 b08:	38 01       	movw	r6, r16
 b0a:	f2 e0       	ldi	r31, 0x02	; 2
 b0c:	6f 0e       	add	r6, r31
 b0e:	71 1c       	adc	r7, r1
 b10:	f8 01       	movw	r30, r16
 b12:	a0 80       	ld	r10, Z
 b14:	b1 80       	ldd	r11, Z+1	; 0x01
 b16:	26 ff       	sbrs	r18, 6
 b18:	03 c0       	rjmp	.+6      	; 0xb20 <vfprintf+0x15a>
 b1a:	65 2d       	mov	r22, r5
 b1c:	70 e0       	ldi	r23, 0x00	; 0
 b1e:	02 c0       	rjmp	.+4      	; 0xb24 <vfprintf+0x15e>
 b20:	6f ef       	ldi	r22, 0xFF	; 255
 b22:	7f ef       	ldi	r23, 0xFF	; 255
 b24:	c5 01       	movw	r24, r10
 b26:	2c 87       	std	Y+12, r18	; 0x0c
 b28:	0e 94 b5 06 	call	0xd6a	; 0xd6a <strnlen_P>
 b2c:	2c 01       	movw	r4, r24
 b2e:	2c 85       	ldd	r18, Y+12	; 0x0c
 b30:	20 68       	ori	r18, 0x80	; 128
 b32:	22 2e       	mov	r2, r18
 b34:	83 01       	movw	r16, r6
 b36:	23 fc       	sbrc	r2, 3
 b38:	1b c0       	rjmp	.+54     	; 0xb70 <vfprintf+0x1aa>
 b3a:	83 2d       	mov	r24, r3
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	48 16       	cp	r4, r24
 b40:	59 06       	cpc	r5, r25
 b42:	b0 f4       	brcc	.+44     	; 0xb70 <vfprintf+0x1aa>
 b44:	b7 01       	movw	r22, r14
 b46:	80 e2       	ldi	r24, 0x20	; 32
 b48:	90 e0       	ldi	r25, 0x00	; 0
 b4a:	0e 94 cb 06 	call	0xd96	; 0xd96 <fputc>
 b4e:	3a 94       	dec	r3
 b50:	f4 cf       	rjmp	.-24     	; 0xb3a <vfprintf+0x174>
 b52:	f5 01       	movw	r30, r10
 b54:	27 fc       	sbrc	r2, 7
 b56:	85 91       	lpm	r24, Z+
 b58:	27 fe       	sbrs	r2, 7
 b5a:	81 91       	ld	r24, Z+
 b5c:	5f 01       	movw	r10, r30
 b5e:	b7 01       	movw	r22, r14
 b60:	90 e0       	ldi	r25, 0x00	; 0
 b62:	0e 94 cb 06 	call	0xd96	; 0xd96 <fputc>
 b66:	31 10       	cpse	r3, r1
 b68:	3a 94       	dec	r3
 b6a:	f1 e0       	ldi	r31, 0x01	; 1
 b6c:	4f 1a       	sub	r4, r31
 b6e:	51 08       	sbc	r5, r1
 b70:	41 14       	cp	r4, r1
 b72:	51 04       	cpc	r5, r1
 b74:	71 f7       	brne	.-36     	; 0xb52 <vfprintf+0x18c>
 b76:	e5 c0       	rjmp	.+458    	; 0xd42 <vfprintf+0x37c>
 b78:	84 36       	cpi	r24, 0x64	; 100
 b7a:	11 f0       	breq	.+4      	; 0xb80 <vfprintf+0x1ba>
 b7c:	89 36       	cpi	r24, 0x69	; 105
 b7e:	39 f5       	brne	.+78     	; 0xbce <vfprintf+0x208>
 b80:	f8 01       	movw	r30, r16
 b82:	27 ff       	sbrs	r18, 7
 b84:	07 c0       	rjmp	.+14     	; 0xb94 <vfprintf+0x1ce>
 b86:	60 81       	ld	r22, Z
 b88:	71 81       	ldd	r23, Z+1	; 0x01
 b8a:	82 81       	ldd	r24, Z+2	; 0x02
 b8c:	93 81       	ldd	r25, Z+3	; 0x03
 b8e:	0c 5f       	subi	r16, 0xFC	; 252
 b90:	1f 4f       	sbci	r17, 0xFF	; 255
 b92:	08 c0       	rjmp	.+16     	; 0xba4 <vfprintf+0x1de>
 b94:	60 81       	ld	r22, Z
 b96:	71 81       	ldd	r23, Z+1	; 0x01
 b98:	88 27       	eor	r24, r24
 b9a:	77 fd       	sbrc	r23, 7
 b9c:	80 95       	com	r24
 b9e:	98 2f       	mov	r25, r24
 ba0:	0e 5f       	subi	r16, 0xFE	; 254
 ba2:	1f 4f       	sbci	r17, 0xFF	; 255
 ba4:	2f 76       	andi	r18, 0x6F	; 111
 ba6:	b2 2e       	mov	r11, r18
 ba8:	97 ff       	sbrs	r25, 7
 baa:	09 c0       	rjmp	.+18     	; 0xbbe <vfprintf+0x1f8>
 bac:	90 95       	com	r25
 bae:	80 95       	com	r24
 bb0:	70 95       	com	r23
 bb2:	61 95       	neg	r22
 bb4:	7f 4f       	sbci	r23, 0xFF	; 255
 bb6:	8f 4f       	sbci	r24, 0xFF	; 255
 bb8:	9f 4f       	sbci	r25, 0xFF	; 255
 bba:	20 68       	ori	r18, 0x80	; 128
 bbc:	b2 2e       	mov	r11, r18
 bbe:	2a e0       	ldi	r18, 0x0A	; 10
 bc0:	30 e0       	ldi	r19, 0x00	; 0
 bc2:	a4 01       	movw	r20, r8
 bc4:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__ultoa_invert>
 bc8:	a8 2e       	mov	r10, r24
 bca:	a8 18       	sub	r10, r8
 bcc:	44 c0       	rjmp	.+136    	; 0xc56 <vfprintf+0x290>
 bce:	85 37       	cpi	r24, 0x75	; 117
 bd0:	29 f4       	brne	.+10     	; 0xbdc <vfprintf+0x216>
 bd2:	2f 7e       	andi	r18, 0xEF	; 239
 bd4:	b2 2e       	mov	r11, r18
 bd6:	2a e0       	ldi	r18, 0x0A	; 10
 bd8:	30 e0       	ldi	r19, 0x00	; 0
 bda:	25 c0       	rjmp	.+74     	; 0xc26 <vfprintf+0x260>
 bdc:	f2 2f       	mov	r31, r18
 bde:	f9 7f       	andi	r31, 0xF9	; 249
 be0:	bf 2e       	mov	r11, r31
 be2:	8f 36       	cpi	r24, 0x6F	; 111
 be4:	c1 f0       	breq	.+48     	; 0xc16 <vfprintf+0x250>
 be6:	18 f4       	brcc	.+6      	; 0xbee <vfprintf+0x228>
 be8:	88 35       	cpi	r24, 0x58	; 88
 bea:	79 f0       	breq	.+30     	; 0xc0a <vfprintf+0x244>
 bec:	b4 c0       	rjmp	.+360    	; 0xd56 <vfprintf+0x390>
 bee:	80 37       	cpi	r24, 0x70	; 112
 bf0:	19 f0       	breq	.+6      	; 0xbf8 <vfprintf+0x232>
 bf2:	88 37       	cpi	r24, 0x78	; 120
 bf4:	21 f0       	breq	.+8      	; 0xbfe <vfprintf+0x238>
 bf6:	af c0       	rjmp	.+350    	; 0xd56 <vfprintf+0x390>
 bf8:	2f 2f       	mov	r18, r31
 bfa:	20 61       	ori	r18, 0x10	; 16
 bfc:	b2 2e       	mov	r11, r18
 bfe:	b4 fe       	sbrs	r11, 4
 c00:	0d c0       	rjmp	.+26     	; 0xc1c <vfprintf+0x256>
 c02:	8b 2d       	mov	r24, r11
 c04:	84 60       	ori	r24, 0x04	; 4
 c06:	b8 2e       	mov	r11, r24
 c08:	09 c0       	rjmp	.+18     	; 0xc1c <vfprintf+0x256>
 c0a:	24 ff       	sbrs	r18, 4
 c0c:	0a c0       	rjmp	.+20     	; 0xc22 <vfprintf+0x25c>
 c0e:	9f 2f       	mov	r25, r31
 c10:	96 60       	ori	r25, 0x06	; 6
 c12:	b9 2e       	mov	r11, r25
 c14:	06 c0       	rjmp	.+12     	; 0xc22 <vfprintf+0x25c>
 c16:	28 e0       	ldi	r18, 0x08	; 8
 c18:	30 e0       	ldi	r19, 0x00	; 0
 c1a:	05 c0       	rjmp	.+10     	; 0xc26 <vfprintf+0x260>
 c1c:	20 e1       	ldi	r18, 0x10	; 16
 c1e:	30 e0       	ldi	r19, 0x00	; 0
 c20:	02 c0       	rjmp	.+4      	; 0xc26 <vfprintf+0x260>
 c22:	20 e1       	ldi	r18, 0x10	; 16
 c24:	32 e0       	ldi	r19, 0x02	; 2
 c26:	f8 01       	movw	r30, r16
 c28:	b7 fe       	sbrs	r11, 7
 c2a:	07 c0       	rjmp	.+14     	; 0xc3a <vfprintf+0x274>
 c2c:	60 81       	ld	r22, Z
 c2e:	71 81       	ldd	r23, Z+1	; 0x01
 c30:	82 81       	ldd	r24, Z+2	; 0x02
 c32:	93 81       	ldd	r25, Z+3	; 0x03
 c34:	0c 5f       	subi	r16, 0xFC	; 252
 c36:	1f 4f       	sbci	r17, 0xFF	; 255
 c38:	06 c0       	rjmp	.+12     	; 0xc46 <vfprintf+0x280>
 c3a:	60 81       	ld	r22, Z
 c3c:	71 81       	ldd	r23, Z+1	; 0x01
 c3e:	80 e0       	ldi	r24, 0x00	; 0
 c40:	90 e0       	ldi	r25, 0x00	; 0
 c42:	0e 5f       	subi	r16, 0xFE	; 254
 c44:	1f 4f       	sbci	r17, 0xFF	; 255
 c46:	a4 01       	movw	r20, r8
 c48:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__ultoa_invert>
 c4c:	a8 2e       	mov	r10, r24
 c4e:	a8 18       	sub	r10, r8
 c50:	fb 2d       	mov	r31, r11
 c52:	ff 77       	andi	r31, 0x7F	; 127
 c54:	bf 2e       	mov	r11, r31
 c56:	b6 fe       	sbrs	r11, 6
 c58:	0b c0       	rjmp	.+22     	; 0xc70 <vfprintf+0x2aa>
 c5a:	2b 2d       	mov	r18, r11
 c5c:	2e 7f       	andi	r18, 0xFE	; 254
 c5e:	a5 14       	cp	r10, r5
 c60:	50 f4       	brcc	.+20     	; 0xc76 <vfprintf+0x2b0>
 c62:	b4 fe       	sbrs	r11, 4
 c64:	0a c0       	rjmp	.+20     	; 0xc7a <vfprintf+0x2b4>
 c66:	b2 fc       	sbrc	r11, 2
 c68:	08 c0       	rjmp	.+16     	; 0xc7a <vfprintf+0x2b4>
 c6a:	2b 2d       	mov	r18, r11
 c6c:	2e 7e       	andi	r18, 0xEE	; 238
 c6e:	05 c0       	rjmp	.+10     	; 0xc7a <vfprintf+0x2b4>
 c70:	7a 2c       	mov	r7, r10
 c72:	2b 2d       	mov	r18, r11
 c74:	03 c0       	rjmp	.+6      	; 0xc7c <vfprintf+0x2b6>
 c76:	7a 2c       	mov	r7, r10
 c78:	01 c0       	rjmp	.+2      	; 0xc7c <vfprintf+0x2b6>
 c7a:	75 2c       	mov	r7, r5
 c7c:	24 ff       	sbrs	r18, 4
 c7e:	0d c0       	rjmp	.+26     	; 0xc9a <vfprintf+0x2d4>
 c80:	fe 01       	movw	r30, r28
 c82:	ea 0d       	add	r30, r10
 c84:	f1 1d       	adc	r31, r1
 c86:	80 81       	ld	r24, Z
 c88:	80 33       	cpi	r24, 0x30	; 48
 c8a:	11 f4       	brne	.+4      	; 0xc90 <vfprintf+0x2ca>
 c8c:	29 7e       	andi	r18, 0xE9	; 233
 c8e:	09 c0       	rjmp	.+18     	; 0xca2 <vfprintf+0x2dc>
 c90:	22 ff       	sbrs	r18, 2
 c92:	06 c0       	rjmp	.+12     	; 0xca0 <vfprintf+0x2da>
 c94:	73 94       	inc	r7
 c96:	73 94       	inc	r7
 c98:	04 c0       	rjmp	.+8      	; 0xca2 <vfprintf+0x2dc>
 c9a:	82 2f       	mov	r24, r18
 c9c:	86 78       	andi	r24, 0x86	; 134
 c9e:	09 f0       	breq	.+2      	; 0xca2 <vfprintf+0x2dc>
 ca0:	73 94       	inc	r7
 ca2:	23 fd       	sbrc	r18, 3
 ca4:	13 c0       	rjmp	.+38     	; 0xccc <vfprintf+0x306>
 ca6:	20 ff       	sbrs	r18, 0
 ca8:	06 c0       	rjmp	.+12     	; 0xcb6 <vfprintf+0x2f0>
 caa:	5a 2c       	mov	r5, r10
 cac:	73 14       	cp	r7, r3
 cae:	18 f4       	brcc	.+6      	; 0xcb6 <vfprintf+0x2f0>
 cb0:	53 0c       	add	r5, r3
 cb2:	57 18       	sub	r5, r7
 cb4:	73 2c       	mov	r7, r3
 cb6:	73 14       	cp	r7, r3
 cb8:	68 f4       	brcc	.+26     	; 0xcd4 <vfprintf+0x30e>
 cba:	b7 01       	movw	r22, r14
 cbc:	80 e2       	ldi	r24, 0x20	; 32
 cbe:	90 e0       	ldi	r25, 0x00	; 0
 cc0:	2c 87       	std	Y+12, r18	; 0x0c
 cc2:	0e 94 cb 06 	call	0xd96	; 0xd96 <fputc>
 cc6:	73 94       	inc	r7
 cc8:	2c 85       	ldd	r18, Y+12	; 0x0c
 cca:	f5 cf       	rjmp	.-22     	; 0xcb6 <vfprintf+0x2f0>
 ccc:	73 14       	cp	r7, r3
 cce:	10 f4       	brcc	.+4      	; 0xcd4 <vfprintf+0x30e>
 cd0:	37 18       	sub	r3, r7
 cd2:	01 c0       	rjmp	.+2      	; 0xcd6 <vfprintf+0x310>
 cd4:	31 2c       	mov	r3, r1
 cd6:	24 ff       	sbrs	r18, 4
 cd8:	12 c0       	rjmp	.+36     	; 0xcfe <vfprintf+0x338>
 cda:	b7 01       	movw	r22, r14
 cdc:	80 e3       	ldi	r24, 0x30	; 48
 cde:	90 e0       	ldi	r25, 0x00	; 0
 ce0:	2c 87       	std	Y+12, r18	; 0x0c
 ce2:	0e 94 cb 06 	call	0xd96	; 0xd96 <fputc>
 ce6:	2c 85       	ldd	r18, Y+12	; 0x0c
 ce8:	22 ff       	sbrs	r18, 2
 cea:	17 c0       	rjmp	.+46     	; 0xd1a <vfprintf+0x354>
 cec:	21 ff       	sbrs	r18, 1
 cee:	03 c0       	rjmp	.+6      	; 0xcf6 <vfprintf+0x330>
 cf0:	88 e5       	ldi	r24, 0x58	; 88
 cf2:	90 e0       	ldi	r25, 0x00	; 0
 cf4:	02 c0       	rjmp	.+4      	; 0xcfa <vfprintf+0x334>
 cf6:	88 e7       	ldi	r24, 0x78	; 120
 cf8:	90 e0       	ldi	r25, 0x00	; 0
 cfa:	b7 01       	movw	r22, r14
 cfc:	0c c0       	rjmp	.+24     	; 0xd16 <vfprintf+0x350>
 cfe:	82 2f       	mov	r24, r18
 d00:	86 78       	andi	r24, 0x86	; 134
 d02:	59 f0       	breq	.+22     	; 0xd1a <vfprintf+0x354>
 d04:	21 fd       	sbrc	r18, 1
 d06:	02 c0       	rjmp	.+4      	; 0xd0c <vfprintf+0x346>
 d08:	80 e2       	ldi	r24, 0x20	; 32
 d0a:	01 c0       	rjmp	.+2      	; 0xd0e <vfprintf+0x348>
 d0c:	8b e2       	ldi	r24, 0x2B	; 43
 d0e:	27 fd       	sbrc	r18, 7
 d10:	8d e2       	ldi	r24, 0x2D	; 45
 d12:	b7 01       	movw	r22, r14
 d14:	90 e0       	ldi	r25, 0x00	; 0
 d16:	0e 94 cb 06 	call	0xd96	; 0xd96 <fputc>
 d1a:	a5 14       	cp	r10, r5
 d1c:	38 f4       	brcc	.+14     	; 0xd2c <vfprintf+0x366>
 d1e:	b7 01       	movw	r22, r14
 d20:	80 e3       	ldi	r24, 0x30	; 48
 d22:	90 e0       	ldi	r25, 0x00	; 0
 d24:	0e 94 cb 06 	call	0xd96	; 0xd96 <fputc>
 d28:	5a 94       	dec	r5
 d2a:	f7 cf       	rjmp	.-18     	; 0xd1a <vfprintf+0x354>
 d2c:	aa 94       	dec	r10
 d2e:	f4 01       	movw	r30, r8
 d30:	ea 0d       	add	r30, r10
 d32:	f1 1d       	adc	r31, r1
 d34:	80 81       	ld	r24, Z
 d36:	b7 01       	movw	r22, r14
 d38:	90 e0       	ldi	r25, 0x00	; 0
 d3a:	0e 94 cb 06 	call	0xd96	; 0xd96 <fputc>
 d3e:	a1 10       	cpse	r10, r1
 d40:	f5 cf       	rjmp	.-22     	; 0xd2c <vfprintf+0x366>
 d42:	33 20       	and	r3, r3
 d44:	09 f4       	brne	.+2      	; 0xd48 <vfprintf+0x382>
 d46:	51 ce       	rjmp	.-862    	; 0x9ea <vfprintf+0x24>
 d48:	b7 01       	movw	r22, r14
 d4a:	80 e2       	ldi	r24, 0x20	; 32
 d4c:	90 e0       	ldi	r25, 0x00	; 0
 d4e:	0e 94 cb 06 	call	0xd96	; 0xd96 <fputc>
 d52:	3a 94       	dec	r3
 d54:	f6 cf       	rjmp	.-20     	; 0xd42 <vfprintf+0x37c>
 d56:	f7 01       	movw	r30, r14
 d58:	86 81       	ldd	r24, Z+6	; 0x06
 d5a:	97 81       	ldd	r25, Z+7	; 0x07
 d5c:	02 c0       	rjmp	.+4      	; 0xd62 <vfprintf+0x39c>
 d5e:	8f ef       	ldi	r24, 0xFF	; 255
 d60:	9f ef       	ldi	r25, 0xFF	; 255
 d62:	2c 96       	adiw	r28, 0x0c	; 12
 d64:	e2 e1       	ldi	r30, 0x12	; 18
 d66:	0c 94 77 07 	jmp	0xeee	; 0xeee <__epilogue_restores__>

00000d6a <strnlen_P>:
 d6a:	fc 01       	movw	r30, r24
 d6c:	05 90       	lpm	r0, Z+
 d6e:	61 50       	subi	r22, 0x01	; 1
 d70:	70 40       	sbci	r23, 0x00	; 0
 d72:	01 10       	cpse	r0, r1
 d74:	d8 f7       	brcc	.-10     	; 0xd6c <strnlen_P+0x2>
 d76:	80 95       	com	r24
 d78:	90 95       	com	r25
 d7a:	8e 0f       	add	r24, r30
 d7c:	9f 1f       	adc	r25, r31
 d7e:	08 95       	ret

00000d80 <strnlen>:
 d80:	fc 01       	movw	r30, r24
 d82:	61 50       	subi	r22, 0x01	; 1
 d84:	70 40       	sbci	r23, 0x00	; 0
 d86:	01 90       	ld	r0, Z+
 d88:	01 10       	cpse	r0, r1
 d8a:	d8 f7       	brcc	.-10     	; 0xd82 <strnlen+0x2>
 d8c:	80 95       	com	r24
 d8e:	90 95       	com	r25
 d90:	8e 0f       	add	r24, r30
 d92:	9f 1f       	adc	r25, r31
 d94:	08 95       	ret

00000d96 <fputc>:
 d96:	0f 93       	push	r16
 d98:	1f 93       	push	r17
 d9a:	cf 93       	push	r28
 d9c:	df 93       	push	r29
 d9e:	18 2f       	mov	r17, r24
 da0:	09 2f       	mov	r16, r25
 da2:	eb 01       	movw	r28, r22
 da4:	8b 81       	ldd	r24, Y+3	; 0x03
 da6:	81 fd       	sbrc	r24, 1
 da8:	03 c0       	rjmp	.+6      	; 0xdb0 <fputc+0x1a>
 daa:	8f ef       	ldi	r24, 0xFF	; 255
 dac:	9f ef       	ldi	r25, 0xFF	; 255
 dae:	20 c0       	rjmp	.+64     	; 0xdf0 <fputc+0x5a>
 db0:	82 ff       	sbrs	r24, 2
 db2:	10 c0       	rjmp	.+32     	; 0xdd4 <fputc+0x3e>
 db4:	4e 81       	ldd	r20, Y+6	; 0x06
 db6:	5f 81       	ldd	r21, Y+7	; 0x07
 db8:	2c 81       	ldd	r18, Y+4	; 0x04
 dba:	3d 81       	ldd	r19, Y+5	; 0x05
 dbc:	42 17       	cp	r20, r18
 dbe:	53 07       	cpc	r21, r19
 dc0:	7c f4       	brge	.+30     	; 0xde0 <fputc+0x4a>
 dc2:	e8 81       	ld	r30, Y
 dc4:	f9 81       	ldd	r31, Y+1	; 0x01
 dc6:	9f 01       	movw	r18, r30
 dc8:	2f 5f       	subi	r18, 0xFF	; 255
 dca:	3f 4f       	sbci	r19, 0xFF	; 255
 dcc:	39 83       	std	Y+1, r19	; 0x01
 dce:	28 83       	st	Y, r18
 dd0:	10 83       	st	Z, r17
 dd2:	06 c0       	rjmp	.+12     	; 0xde0 <fputc+0x4a>
 dd4:	e8 85       	ldd	r30, Y+8	; 0x08
 dd6:	f9 85       	ldd	r31, Y+9	; 0x09
 dd8:	81 2f       	mov	r24, r17
 dda:	09 95       	icall
 ddc:	89 2b       	or	r24, r25
 dde:	29 f7       	brne	.-54     	; 0xdaa <fputc+0x14>
 de0:	2e 81       	ldd	r18, Y+6	; 0x06
 de2:	3f 81       	ldd	r19, Y+7	; 0x07
 de4:	2f 5f       	subi	r18, 0xFF	; 255
 de6:	3f 4f       	sbci	r19, 0xFF	; 255
 de8:	3f 83       	std	Y+7, r19	; 0x07
 dea:	2e 83       	std	Y+6, r18	; 0x06
 dec:	81 2f       	mov	r24, r17
 dee:	90 2f       	mov	r25, r16
 df0:	df 91       	pop	r29
 df2:	cf 91       	pop	r28
 df4:	1f 91       	pop	r17
 df6:	0f 91       	pop	r16
 df8:	08 95       	ret

00000dfa <__ultoa_invert>:
 dfa:	fa 01       	movw	r30, r20
 dfc:	aa 27       	eor	r26, r26
 dfe:	28 30       	cpi	r18, 0x08	; 8
 e00:	51 f1       	breq	.+84     	; 0xe56 <__ultoa_invert+0x5c>
 e02:	20 31       	cpi	r18, 0x10	; 16
 e04:	81 f1       	breq	.+96     	; 0xe66 <__ultoa_invert+0x6c>
 e06:	e8 94       	clt
 e08:	6f 93       	push	r22
 e0a:	6e 7f       	andi	r22, 0xFE	; 254
 e0c:	6e 5f       	subi	r22, 0xFE	; 254
 e0e:	7f 4f       	sbci	r23, 0xFF	; 255
 e10:	8f 4f       	sbci	r24, 0xFF	; 255
 e12:	9f 4f       	sbci	r25, 0xFF	; 255
 e14:	af 4f       	sbci	r26, 0xFF	; 255
 e16:	b1 e0       	ldi	r27, 0x01	; 1
 e18:	3e d0       	rcall	.+124    	; 0xe96 <__ultoa_invert+0x9c>
 e1a:	b4 e0       	ldi	r27, 0x04	; 4
 e1c:	3c d0       	rcall	.+120    	; 0xe96 <__ultoa_invert+0x9c>
 e1e:	67 0f       	add	r22, r23
 e20:	78 1f       	adc	r23, r24
 e22:	89 1f       	adc	r24, r25
 e24:	9a 1f       	adc	r25, r26
 e26:	a1 1d       	adc	r26, r1
 e28:	68 0f       	add	r22, r24
 e2a:	79 1f       	adc	r23, r25
 e2c:	8a 1f       	adc	r24, r26
 e2e:	91 1d       	adc	r25, r1
 e30:	a1 1d       	adc	r26, r1
 e32:	6a 0f       	add	r22, r26
 e34:	71 1d       	adc	r23, r1
 e36:	81 1d       	adc	r24, r1
 e38:	91 1d       	adc	r25, r1
 e3a:	a1 1d       	adc	r26, r1
 e3c:	20 d0       	rcall	.+64     	; 0xe7e <__ultoa_invert+0x84>
 e3e:	09 f4       	brne	.+2      	; 0xe42 <__ultoa_invert+0x48>
 e40:	68 94       	set
 e42:	3f 91       	pop	r19
 e44:	2a e0       	ldi	r18, 0x0A	; 10
 e46:	26 9f       	mul	r18, r22
 e48:	11 24       	eor	r1, r1
 e4a:	30 19       	sub	r19, r0
 e4c:	30 5d       	subi	r19, 0xD0	; 208
 e4e:	31 93       	st	Z+, r19
 e50:	de f6       	brtc	.-74     	; 0xe08 <__ultoa_invert+0xe>
 e52:	cf 01       	movw	r24, r30
 e54:	08 95       	ret
 e56:	46 2f       	mov	r20, r22
 e58:	47 70       	andi	r20, 0x07	; 7
 e5a:	40 5d       	subi	r20, 0xD0	; 208
 e5c:	41 93       	st	Z+, r20
 e5e:	b3 e0       	ldi	r27, 0x03	; 3
 e60:	0f d0       	rcall	.+30     	; 0xe80 <__ultoa_invert+0x86>
 e62:	c9 f7       	brne	.-14     	; 0xe56 <__ultoa_invert+0x5c>
 e64:	f6 cf       	rjmp	.-20     	; 0xe52 <__ultoa_invert+0x58>
 e66:	46 2f       	mov	r20, r22
 e68:	4f 70       	andi	r20, 0x0F	; 15
 e6a:	40 5d       	subi	r20, 0xD0	; 208
 e6c:	4a 33       	cpi	r20, 0x3A	; 58
 e6e:	18 f0       	brcs	.+6      	; 0xe76 <__ultoa_invert+0x7c>
 e70:	49 5d       	subi	r20, 0xD9	; 217
 e72:	31 fd       	sbrc	r19, 1
 e74:	40 52       	subi	r20, 0x20	; 32
 e76:	41 93       	st	Z+, r20
 e78:	02 d0       	rcall	.+4      	; 0xe7e <__ultoa_invert+0x84>
 e7a:	a9 f7       	brne	.-22     	; 0xe66 <__ultoa_invert+0x6c>
 e7c:	ea cf       	rjmp	.-44     	; 0xe52 <__ultoa_invert+0x58>
 e7e:	b4 e0       	ldi	r27, 0x04	; 4
 e80:	a6 95       	lsr	r26
 e82:	97 95       	ror	r25
 e84:	87 95       	ror	r24
 e86:	77 95       	ror	r23
 e88:	67 95       	ror	r22
 e8a:	ba 95       	dec	r27
 e8c:	c9 f7       	brne	.-14     	; 0xe80 <__ultoa_invert+0x86>
 e8e:	00 97       	sbiw	r24, 0x00	; 0
 e90:	61 05       	cpc	r22, r1
 e92:	71 05       	cpc	r23, r1
 e94:	08 95       	ret
 e96:	9b 01       	movw	r18, r22
 e98:	ac 01       	movw	r20, r24
 e9a:	0a 2e       	mov	r0, r26
 e9c:	06 94       	lsr	r0
 e9e:	57 95       	ror	r21
 ea0:	47 95       	ror	r20
 ea2:	37 95       	ror	r19
 ea4:	27 95       	ror	r18
 ea6:	ba 95       	dec	r27
 ea8:	c9 f7       	brne	.-14     	; 0xe9c <__ultoa_invert+0xa2>
 eaa:	62 0f       	add	r22, r18
 eac:	73 1f       	adc	r23, r19
 eae:	84 1f       	adc	r24, r20
 eb0:	95 1f       	adc	r25, r21
 eb2:	a0 1d       	adc	r26, r0
 eb4:	08 95       	ret

00000eb6 <__prologue_saves__>:
 eb6:	2f 92       	push	r2
 eb8:	3f 92       	push	r3
 eba:	4f 92       	push	r4
 ebc:	5f 92       	push	r5
 ebe:	6f 92       	push	r6
 ec0:	7f 92       	push	r7
 ec2:	8f 92       	push	r8
 ec4:	9f 92       	push	r9
 ec6:	af 92       	push	r10
 ec8:	bf 92       	push	r11
 eca:	cf 92       	push	r12
 ecc:	df 92       	push	r13
 ece:	ef 92       	push	r14
 ed0:	ff 92       	push	r15
 ed2:	0f 93       	push	r16
 ed4:	1f 93       	push	r17
 ed6:	cf 93       	push	r28
 ed8:	df 93       	push	r29
 eda:	cd b7       	in	r28, 0x3d	; 61
 edc:	de b7       	in	r29, 0x3e	; 62
 ede:	ca 1b       	sub	r28, r26
 ee0:	db 0b       	sbc	r29, r27
 ee2:	0f b6       	in	r0, 0x3f	; 63
 ee4:	f8 94       	cli
 ee6:	de bf       	out	0x3e, r29	; 62
 ee8:	0f be       	out	0x3f, r0	; 63
 eea:	cd bf       	out	0x3d, r28	; 61
 eec:	09 94       	ijmp

00000eee <__epilogue_restores__>:
 eee:	2a 88       	ldd	r2, Y+18	; 0x12
 ef0:	39 88       	ldd	r3, Y+17	; 0x11
 ef2:	48 88       	ldd	r4, Y+16	; 0x10
 ef4:	5f 84       	ldd	r5, Y+15	; 0x0f
 ef6:	6e 84       	ldd	r6, Y+14	; 0x0e
 ef8:	7d 84       	ldd	r7, Y+13	; 0x0d
 efa:	8c 84       	ldd	r8, Y+12	; 0x0c
 efc:	9b 84       	ldd	r9, Y+11	; 0x0b
 efe:	aa 84       	ldd	r10, Y+10	; 0x0a
 f00:	b9 84       	ldd	r11, Y+9	; 0x09
 f02:	c8 84       	ldd	r12, Y+8	; 0x08
 f04:	df 80       	ldd	r13, Y+7	; 0x07
 f06:	ee 80       	ldd	r14, Y+6	; 0x06
 f08:	fd 80       	ldd	r15, Y+5	; 0x05
 f0a:	0c 81       	ldd	r16, Y+4	; 0x04
 f0c:	1b 81       	ldd	r17, Y+3	; 0x03
 f0e:	aa 81       	ldd	r26, Y+2	; 0x02
 f10:	b9 81       	ldd	r27, Y+1	; 0x01
 f12:	ce 0f       	add	r28, r30
 f14:	d1 1d       	adc	r29, r1
 f16:	0f b6       	in	r0, 0x3f	; 63
 f18:	f8 94       	cli
 f1a:	de bf       	out	0x3e, r29	; 62
 f1c:	0f be       	out	0x3f, r0	; 63
 f1e:	cd bf       	out	0x3d, r28	; 61
 f20:	ed 01       	movw	r28, r26
 f22:	08 95       	ret

00000f24 <_exit>:
 f24:	f8 94       	cli

00000f26 <__stop_program>:
 f26:	ff cf       	rjmp	.-2      	; 0xf26 <__stop_program>
